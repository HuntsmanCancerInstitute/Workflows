#e your.name@hci.utah.edu -ab
#c redwood

# version 6


# custom stuff, replace as necessary
NAME=MYNAME
ID=MYID
SAMPLE=MYSAMPLE


# Load environment and modules 
module load parallel 
module load jdk 
JAVA_PATH=`which java`


### Paths - relative to Pysano directories
# Applications
CLUMPIFY=/tomato/dev/app/BBmap/v38.34/clumpify.sh
CUTADAPT=/tomato/dev/app/modulesoftware/cutadapt
STAR=/tomato/dev/app/STAR/2.7.0f/STAR
FEATCOUNT=/tomato/dev/app/Subread/1.5.1/bin/featureCounts
RSEM=/tomato/dev/app/rsem/1.3.1/
SAMTOOL=/tomato/dev/app/samtools/1.8/samtools
PICARD=/tomato/dev/app/picard/2.9.0/picard.jar
STU=/tomato/dev/app/useq/9.1.3/Apps/Sam2USeq
UTBW=/tomato/dev/app/useq/9.1.3/Apps/USeq2UCSCBig
UCSC=/tomato/dev/app/UCSC/
BEDTOOL=/tomato/dev/app/bedtools/2.22.1/bedtools
GATK_PATH=/tomato/dev/app/gatk/3.8/GenomeAnalysisTK.jar
TAB_PATH=/tomato/dev/app/tabix/1.8/

# Resources
INDEX=/tomato/dev/data/Human/GRCh38/release96/star125
RSEMINDEX=/tomato/dev/data/Human/GRCh38/release96/rsem/RSEM
GTF=/tomato/dev/data/Human/GRCh38/release96/Homo_sapiens.GRCh38.96.gtf
REFFLAT=/tomato/dev/data/Human/GRCh38/release96/Homo_sapiens.GRCh38.96.refflat
RIBOINT=/tomato/dev/data/Human/GRCh38/release96/Homo_sapiens.GRCh38.96.rRNA.interval
CHROMSIZE=/tomato/dev/data/Human/GRCh38/chrom.sizes
REF=/tomato/dev/data/Human/GRCh38/Homo_sapiens.GRCh38.dna.primary_assembly.fa
GOLDINDELS=/tomato/dev/data/Human/GRCh38/GATK/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz
HICONFSNPS=/tomato/dev/data/Human/GRCh38/GATK/1000G_phase1.snps.high_confidence.hg38.vcf.gz
DBSNP=/tomato/dev/data/Human/GRCh38/GATK/dbsnp_144.hg38.vcf.gz
EXONS=/tomato/dev/data/Human/GRCh38/release96/Homo_sapiens.GRCh38.96.mergedExons.bed


### Fastq file
FIRST=`ls *R1_001.fastq.gz`
SECOND=`ls *R2_001.fastq.gz`


### Remove optical duplicates from fastq
# this is only needed for NovaSeq alignments - adjust accordingly
$CLUMPIFY \
in1=$FIRST \
in2=$SECOND \
out1=$NAME.read1.fastq.gz \
out2=$NAME.read2.fastq.gz \
dupedist=10000 \
dedupe=t \
optical=t 2> $NAME.clumpify.out.txt 

FIRST=$NAME.read1.fastq.gz
SECOND=$NAME.read2.fastq.gz



### Trim adapters
echo "==== Trimming with cutadapt ===="
$CUTADAPT \
-a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \
-A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
-o $NAME.trim1.fastq.gz \
-p $NAME.trim2.fastq.gz \
-j $NCPU -m 25 \
$FIRST $SECOND > $NAME.cutadapt.out.txt

rm -f $FIRST $SECOND


###  STAR alignment
# set maximum intron 100 kb, mean intron for hg38 is 8kb, SD 25 kb
# set BAM sort ram to 25 GB - complains if too low or takes all
echo "==== aligning $NAME with STAR ===="
$STAR --runMode alignReads \
--genomeDir $INDEX \
--twopassMode Basic \
--readFilesIn $NAME.trim1.fastq.gz $NAME.trim2.fastq.gz \
--readFilesCommand zcat \
--runThreadN $NCPU \
--alignIntronMax 100000 \
--alignIntronMin 20 \
--alignMatesGapMax 100000 \
--outFilterMismatchNmax 20 \
--outFilterMismatchNoverLmax 0.3 \
--outSAMtype BAM SortedByCoordinate \
--limitBAMsortRAM 25000000000 \
--outSAMmapqUnique 60 \
--outSAMattrRGline ID:$ID LB:$ID PL:Illumina PU:$ID SM:$SAMPLE CN:HCI \
--quantMode TranscriptomeSAM \
--quantTranscriptomeBan IndelSoftclipSingleend \
--outWigType None 

# rename 
mv Aligned.sortedByCoord.out.bam $NAME.bam
mv Aligned.toTranscriptome.out.bam $NAME.transcriptome.bam
mv Log.final.out $NAME.Log.final.out

# cleanup star stuff
rm -rf _STARpass1
rm -rf _STARgenome
rm -f Log.out Log.progress.out
rm -f $NAME.trim1.fastq.gz $NAME.trim2.fastq.gz

# Samtools index
echo; echo "==== samtools stats ===="
$SAMTOOL index -b -@ 4 $NAME.bam
$SAMTOOL idxstats $NAME.bam | sort -V > $NAME.idxstats


### Run featureCounts for paired-end alignments
echo; echo "==== FeatureCounts ===="
$FEATCOUNT -T $NCPU -p -C -s 2 --largestOverlap -a $GTF -o $NAME.counts $NAME.bam
gzip $NAME.counts


### Run RSEM
echo; echo "==== RSEM calculate expression ===="
$RSEM/rsem-calculate-expression \
--alignments --paired-end --num-threads $NCPU \
--no-bam-output --quiet \
$NAME.transcriptome.bam \
$RSEMINDEX \
$NAME \
&& rm -f $NAME.transcriptome.bam


### RnaSeq metrics
echo; echo "==== RNASeq Metrics ===="
$JAVA_PATH -Xmx${SMGB}G -jar $PICARD CollectRnaSeqMetrics REF_FLAT=$REFFLAT \
STRAND=SECOND_READ_TRANSCRIPTION_STRAND RIBOSOMAL_INTERVALS=$RIBOINT \
I=$NAME.bam O=$NAME.rna_metrics


### Filter reads
# UNMAP,SECONDARY,QCFAIL,SUPPLEMENTARY = 2820 = 0xb04
echo; echo "==== samtools filter ===="
$SAMTOOL view -F 2820 -@ 8 -b -o $NAME.filter.bam $NAME.bam
$SAMTOOL index -b -@ 8 $NAME.filter.bam $NAME.filter.bai


### Mark duplicates  
echo; echo "==== Picard MarkDuplicates ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $PICARD MarkDuplicates \
I=$NAME.filter.bam \
O=$NAME.mkdup.bam \
M=$NAME.markduplicates.txt \
REMOVE_DUPLICATES=false \
CREATE_INDEX=true \
&& rm -f $NAME.filter.ba*



### Generate Read Coverage and passing bed file
echo; echo "==== USeq Coverage Stats ===="
$JAVA_PATH -Xmx${SMGB}G -jar $STU \
-f $NAME.mkdup.bam \
-v H_sapiens_Dec_2013 \
-m 10 -a 1000 -r \
-b $EXONS \
-x 1000 -c 20 \
-p $NAME.region_stats.txt.gz \
-j $NAME.stats.json.gz \
-o $NAME.stats.txt \
-n $NAME

# Convert USeq to BigWig and clean up
$JAVA_PATH -Xmx${SMGB}G -jar $UTBW \
-u ./ \
-d $UCSC \
&& rm -f *.useq



### Split and trim intron junctions
echo; echo "==== GATK SplitNCigarReads ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T SplitNCigarReads \
-jdk_deflater -jdk_inflater \
-R $REF \
-I $NAME.mkdup.bam \
-o $NAME.split.bam \
-U ALLOW_N_CIGAR_READS \
-drf DuplicateRead \
&& rm -f $NAME.mkdup.ba*



### Indel realigner - probably not necessary, but we can do it
echo; echo "==== GATK RealignerTargetCreator ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T RealignerTargetCreator \
-jdk_deflater -jdk_inflater \
-R $REF \
-I $NAME.split.bam \
-o $NAME.intervals \
--known $GOLDINDELS \
-nt $NCPU

echo; echo "==== GATK IndelRealigner ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T IndelRealigner \
-jdk_deflater -jdk_inflater \
-R $REF \
-targetIntervals $NAME.intervals \
-I $NAME.split.bam \
-o $NAME.realign.bam \
-drf DuplicateRead \
-known $GOLDINDELS \
&& rm -f $NAME.split.ba* $NAME.intervals



### Base recalibration
echo; echo "==== GATK BaseRecalibrator ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T BaseRecalibrator \
-jdk_deflater -jdk_inflater \
-R $REF \
-knownSites $HICONFSNPS \
-knownSites $GOLDINDELS \
-I $NAME.realign.bam \
-o $NAME.realign.grp \
-nct $NCPU

echo; echo "==== GATK PrintReads ===="
$JAVA_PATH -Xmx${SMGB}g -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T PrintReads \
-jdk_deflater -jdk_inflater \
-R $REF \
-I $NAME.realign.bam \
-BQSR $NAME.realign.grp \
-o $NAME.final.bam \
-drf DuplicateRead \
-nct $NCPU \
&& rm -f $NAME.realign.*


### Prepare bed file of passing coverage intervals for variant calling

# Extend file by 20 bp in both directions as padding, there are some 1 bp intervals
zcat ${NAME}_Pass.bed.gz | \
$BEDTOOL slop -g $CHROMSIZE -b 20 -i - | \
$BEDTOOL sort -i - > ${NAME}_Pass.ext20.bed

# split file by lines into chunks
split -a 1 -n l/12 --additional-suffix=.bed ${NAME}_Pass.ext20.bed ${NAME}_call.
gzip ${NAME}_Pass.ext20.bed



### Haplotype variant call
# keep duplicate read filter intact
echo; echo "==== GATK HaplotypeCaller ===="
parallel -k --delay 10 \
$JAVA_PATH -Xmx4G -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T HaplotypeCaller \
-jdk_deflater -jdk_inflater \
-R $REF \
--dbsnp $DBSNP \
-I $NAME.final.bam \
-dontUseSoftClippedBases \
-stand_call_conf 20.0 \
-mmq 1 \
--min_base_quality_score 20 \
-L {} \
-o {.}.raw.vcf.gz \
':::' ${NAME}_call.*.bed

# variant filtering
echo; echo "==== GATK Filter variants ===="
parallel -k --delay 10 \
$JAVA_PATH -Xmx4G -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T VariantFiltration \
-R $REF \
-V {.}.raw.vcf.gz \
-window 35 \
-cluster 3 \
-filterName FS \
-filter "'FS > 30.0'" \
-filterName QD \
-filter "'QD < 2.0'" \
-o {.}.vcf.gz \
':::' ${NAME}_call.*.bed

# merge raw variants
echo; echo "======= Concatenate final variants"
$JAVA_PATH -Xmx20G -jar $PICARD SortVcf \
SD=${REF%fa}dict \
O=$NAME.vcf.gz \
I=${NAME}_call.a.vcf.gz \
I=${NAME}_call.b.vcf.gz \
I=${NAME}_call.c.vcf.gz \
I=${NAME}_call.d.vcf.gz \
I=${NAME}_call.e.vcf.gz \
I=${NAME}_call.f.vcf.gz \
I=${NAME}_call.g.vcf.gz \
I=${NAME}_call.h.vcf.gz \
I=${NAME}_call.i.vcf.gz \
I=${NAME}_call.j.vcf.gz \
I=${NAME}_call.k.vcf.gz \
I=${NAME}_call.l.vcf.gz \
&& rm -f ${NAME}_call.*




### Generate genomic VCF for joint genotyping

# split file by lines into chunks
split -a 1 -n l/12 --additional-suffix=.bed $EXONS exon_call.

# haplotype call
echo; echo "==== GATK gVCF HaplotypeCaller ===="
parallel -k --delay 10 \
$JAVA_PATH -Xmx4G -XX:ParallelGCThreads=${GCT} -Djava.io.tmpdir=/scratch/local \
-jar $GATK_PATH -T HaplotypeCaller \
-jdk_deflater -jdk_inflater \
-R $REF \
-I $NAME.final.bam \
-dontUseSoftClippedBases \
--genotyping_mode DISCOVERY \
--emitRefConfidence GVCF \
-stand_call_conf 20.0 \
-mmq 1 \
--min_base_quality_score 20 \
-L {} \
--interval_padding 20 \
-o {.}.g.vcf.gz \
':::' exon_call.*.bed

echo; echo "======= Concatenate gVCF variants"
$JAVA_PATH -Xmx20G -jar $PICARD SortVcf \
SD=${REF%fa}dict \
O=$NAME.g.vcf.gz \
I=exon_call.a.g.vcf.gz \
I=exon_call.b.g.vcf.gz \
I=exon_call.c.g.vcf.gz \
I=exon_call.d.g.vcf.gz \
I=exon_call.e.g.vcf.gz \
I=exon_call.f.g.vcf.gz \
I=exon_call.g.g.vcf.gz \
I=exon_call.h.g.vcf.gz \
I=exon_call.i.g.vcf.gz \
I=exon_call.j.g.vcf.gz \
I=exon_call.k.g.vcf.gz \
I=exon_call.l.g.vcf.gz \
&& rm -f exon_call.*




### Clean up
rm -f $NAME.ba*

