# Circulating Tumor - Normal Somatic Variant Calling Workflow 
# Snakemake rule set
# 22 Dec 2020
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
allRam = int(round(float(config["allRam"])))

# Resources
tumorBam = config["tumorBam"]
normalBam = config["normalBam"]
indexFasta = config["indexFasta"]
regions = config["regionsForAnalysis"]
bpileup = config["bpileup"]

##queryDataDir = config["queryDataDir"]
##queryVcfFileFilter = config["queryVcfFileFilter"]
##queryBedFileFilter = config["queryBedFileFilter"]

# Apps in docker image
useq = "/BioApps/USeq/Apps"
bcftools = "/BioApps/Bcftools1.9/bin/bcftools"
htsLib = "/BioApps/Htslib1.9/bin/"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
strelka = "/BioApps/Strelka_2.9.10"
manta = "/BioApps/Manta_1.6.0"

# VCF variant filtering params
minMappingQuality = config["minMappingQuality"]
minTumorAlignmentDepth = config["minTumorAlignmentDepth"]
minTumorAltCount = config["minTumorAltCount"]
minNormalAlignmentDepth = config["minNormalAlignmentDepth"]
minTumorAF = config["minTumorAF"]
maxTumorAF = config["maxTumorAF"]
maxNormalAF = config["maxNormalAF"]
minTNRatio = config["minTNRatio"]
minTNDiff = config["minTNDiff"]
maxFisherPval = config["maxFisherPval"]
bkzArgs = config["VCFBkzArgs"]

# Workflow trigger, final rule, cleanup and tabix index the vcfs 
rule VcfTabix:
    input:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz.tbi"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "{java} {useq}/VCFTabix -t {htsLib} -v Vcfs/ &> {log}"


# Calls Bcftools to generate raw unfiltered vcf
rule Bcftools:
    output:
        temp ("Vcfs/"+nameBuild+ "_raw.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_Bcftools.log"
    threads: 
        allThreads
    shell:
        "{bcftools} mpileup --count-orphans --no-BAQ --regions-file {regions} --max-depth 100000 "
        "--max-idepth 100000 --gap-frac 0.001 --per-sample-mF --ignore-RG --min-MQ {minMappingQuality} "
        "--fasta-ref {indexFasta} --ff UNMAP,SECONDARY,QCFAIL --annotate FORMAT/AD -Ou {tumorBam} {normalBam} | "
        "{bcftools} norm --fasta-ref {indexFasta} --multiallelics -any 2> {log} | grep -w -v '<\*>' | gzip > {output} "

# Tabulate pileup info from normal file for INDEL scanning by SSC
rule BamPileup:
    output:
        bp = temp (nameBuild+ "_Normal.bp.txt.gz"),
        index = temp (nameBuild+ "_Normal.bp.txt.gz.tbi")
    log:
        "Logs/"+ nameBuild+ "_BamPileup.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/BamPileup -b {normalBam} -r {regions} -f {indexFasta} "
        "-s {output.bp} -p {threads} -t {htsLib} &> {log} "

# Filter the raw calls
rule SimpleSomaticCaller:
    input:
        vcf = "Vcfs/" + nameBuild+ "_raw.vcf.gz",
        bp = nameBuild+ "_Normal.bp.txt.gz",
        ix = nameBuild+ "_Normal.bp.txt.gz.tbi" 
    output:
        temp ("Vcfs/" + nameBuild+ "_ssc.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_SimpleSomaticCaller.log"
    shell:
        "{java} {useq}/SimpleSomaticCaller -v {input.vcf} -s Vcfs -t {minTumorAF} -x {maxTumorAF} "
        "-u {minTumorAlignmentDepth} -n {maxNormalAF} -o {minNormalAlignmentDepth} -a {minTumorAltCount} "
        "-f {maxFisherPval} -d {minTNDiff} -r {minTNRatio} -m -b {input.bp} -i 0.02 -j 0.5 &> {log} && "
        "mv -f Vcfs/{nameBuild}_raw.ssc.pass.vcf.gz {output} &>> {log} && rm -f Vcfs/{nameBuild}_raw.ssc.fail.vcf.gz"

# Calls Manta for candidate indels
rule Manta:
    output:
        dir = nameBuild+ "_Manta",
        vcf = nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_Manta.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} &>> {log} && "
        "source /BioApps/Miniconda3/bin/activate python2 &>> {log} && "
        "{manta}/bin/configManta.py --exome "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--runDir={output.dir} &>> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate &>> {log}"

# Calls Strelka for tumor vs matched control normal analysis
rule Strelka:
    input:
        nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    output:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz",
        bed = "Bed/"+ nameBuild+ "_StrelkaCallableRegion.bed.gz"
    log:
        "Logs/"+ nameBuild+ "_Strelka.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} && source /BioApps/Miniconda3/bin/activate python2 &&"
        "{strelka}/bin/configureStrelkaSomaticWorkflow.py --exome --outputCallableRegions "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--indelCandidates={input} --callRegions={regions} --runDir={output.dir} &> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz Bed/{nameBuild}_StrelkaCallableRegion.bed.gz && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz.tbi Bed/{nameBuild}_StrelkaCallableRegion.bed.gz.tbi"

# Merge the Strelka snv and idel vcf files
rule StrelkaMerge:
    input:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz"
    output:
        temp ("Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_StrelkaMerge.log"
    shell:
        "{java} {useq}/VCFMerger -o {output} -v {input.dir}/results/variants/ &> {log} && "
        "rm -rf *_Manta *_Strelka "

# Applies a variety of filters
rule StrelkaFilter:
    input:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    output:
        temp ("Vcfs/" + nameBuild+"_Strelka.raw_Filtered.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_StrelkaFilter.log"
    shell:
        "{java} {useq}/StrelkaVCFParser -v {input} -t {minTumorAF} -f Vcfs "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} -a {minTumorAltCount} &> {log} "


# Merge VCFs from the different callers
rule VCFConsensus:
    input:
        strelka = "Vcfs/" + nameBuild+"_Strelka.raw_Filtered.vcf.gz",
        ssc = "Vcfs/" + nameBuild+ "_ssc.vcf.gz"
    output:
        temp ("Vcfs/" + nameBuild+ "_consensus.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VCFConsensus.log"
    shell:
        "{java} {useq}/VCFConsensus -p {input.strelka} -s {input.ssc} -o {output} -q Strelka -t SSC &> {log}"

# Use panel of normal bams to z-score and filter the vcf records
rule VCFBkz:
    input:
        "Vcfs/" + nameBuild+ "_consensus.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_VCFBkz.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFBkz -u -b {bpileup} {bkzArgs} -v {input} -s Vcfs "
        "-c {minTumorAlignmentDepth} &> {log} && mv -f Vcfs/{nameBuild}_consensus.bkz.vcf.gz {output} &>> {log} "

# Calculate the prior call frequency from a GQuery index, the config file should just specify the fileFilter
#rule VCFCallFrequency:
#    input:
#        vcf = nameBuild+ "_bkz.vcf.gz"
#    output:
#        "Vcfs/" + nameBuild+ "_final.vcf.gz"
#    log:
#        "Logs/"+ nameBuild+ "_VCFCallFrequency.log"
#    threads:
#        allThreads
#    shell:
#        "{java} {useq}/VCFCallFrequency -f {input.vcf} -s TempVCFCallFreq -v {queryVcfFileFilter} "
#        "-b {queryBedFileFilter}  -d {queryDataDir} -m 0.075 &> {log} && "
#        "mv -f TempVCFCallFreq/*.callFreq.vcf.gz {output} && rm -rf TempVCFCallFreq"


onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
