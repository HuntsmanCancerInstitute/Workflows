# Hg38 Exome Alignment and QC Workflow 
# 3 Nov 2020
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_Hg38" 

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Gzipped Fastq files
fastqReadOne = config["fastqReadOne"]
fastqReadTwo = config["fastqReadTwo"]

# Resources
regionsForReadCoverage = config["regionsForReadCoverage"]
regionsForOnTarget = config["regionsForOnTarget"]
indexFasta = config["indexFasta"]
gSnp = config["gSnp"]
gIndel = config["gIndel"]
dbsnp = config["dbsnp"]

# Filtering params
useqSamAlignmentExtractor = config["useqSamAlignmentExtractor"]
useqSam2USeq = config["useqSam2USeq"]

# Apps
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
useq = config["useq"]
ucsc = config["ucsc"]
htslib = config["htslib"]

############# Rules ##############

# Workflow trigger, pulls info from the json files into xls and html reports
rule AggregateQCStats:
    input:
        g=  nameBuild+ "_checkGzipFiles.complete",
        f= "Json/"+nameBuild+ "_FastqCount.json.gz",
        s= "Json/"+nameBuild+ "_SamAlignmentExtractor.json.gz",
        m= "Json/"+nameBuild+ "_MergePairedAlignments.json.gz",
        u= "Json/"+nameBuild+ "_Sam2USeq.json.gz",
        w= "QC/"+ nameBuild+ "_uniObReadCov.bw",
        v= "Vcfs/"+ nameBuild+ "_Haplo.g.vcf.gz",
        d= "Json/"+ nameBuild+ "_RemoveDuplicates.json.gz",
        c= "Bam/"+ nameBuild+ "_final.cram.crai",
        t= "QC/"+ nameBuild+ "_Pass.bed.gz.tbi" 
    output:
        directory( "QC/"+ nameBuild+ "_AggQC" )
    log:
        "Logs/"+ nameBuild+ "_AggregateQCStats.log",
    shell:
        "{java} {useq}/AggregateQCStats -j Json -r {output} -p {nameBuild}_ &> {log} && "
        "touch COMPLETE && "
        "rm -rf *_dupFree.ba* *_sae.ba* *_unfiltered.ba* *_raw.bam *_MPA *_uniObReadCov.useq " 
        
############# Fastq and resources check ##############

# Uses gunzip -t to check the integrity of the xxx.gz files in the working directory
rule CheckGzipFiles:
    output:
        temp( nameBuild+ "_checkGzipFiles.complete")
    log:
        "Logs/"+ nameBuild+ "_CheckGzipFiles.log"
    shell:
        "gunzip -tv {fastqReadOne} {fastqReadTwo} &> {log} && touch {output}"

# Count the number of fastq records
rule CountFastq:
    input:
        "Logs/"+ nameBuild+ "_AlignHg38.log"
    output:
        "Json/" + nameBuild + "_FastqCount.json.gz"
    shell:
        "y=$(grep -A 1 'algo: bwa-mem' {input} | tail -n 1 | cut -d' ' -f2) && "
        "echo \{{ > Json/{nameBuild}_FastqCount.json && "
        "echo \\\"numberFastqReads\\\": $y >> Json/{nameBuild}_FastqCount.json && "
        "echo \}} >> Json/{nameBuild}_FastqCount.json && "
        "gzip Json/{nameBuild}_FastqCount.json"
        
############# Alignment B38 ###############

# Align to Hg38 with bwa mem and sort                                                                                                 
rule AlignHg38:
    output:
        bam = temp (nameBuild+ "_sorted.bam"),
        bai = temp (nameBuild+ "_sorted.bam.bai")
    log:
        "Logs/"+ nameBuild+ "_AlignHg38.log"
    params:
        rg ="\"@RG\\tID:"+nameBuild+"\\tPL:ILLUMINA\\tLB:"+nameBuild+"\\tSM:"+nameBuild+ "\\tCN:HCI\\tPU:"+nameBuild+"\""
    threads:
        allThreads
    shell:
        "rm -f {log} && "
        "sentieon bwa mem -M -R {params.rg} -t {threads} -K 10000000 {indexFasta} {fastqReadOne} "
        "{fastqReadTwo} 2>> {log} | sentieon util sort -r {indexFasta} -o {output.bam} -t {threads} --sam2bam -i - 2>> {log}"

# Use the SamAlignmentExtractor to remove poor quality alignments 
rule SamAlignmentExtractor:
    input:
        bam = nameBuild+ "_sorted.bam",
        bai = nameBuild+ "_sorted.bam.bai"
    output:
        bam = temp (nameBuild+ "_sae.bam"),
        bai = temp (nameBuild+ "_sae.bai"),
        json = "Json/"+ nameBuild+ "_SamAlignmentExtractor.json.gz"
    threads:
       halfThreads
    log:
        "Logs/"+ nameBuild+ "_SamAlignmentExtractor.log",
    shell:
        "{java} {useq}/SamAlignmentExtractor {useqSamAlignmentExtractor} "
        "-s {nameBuild}_SAE -b {input.bam} "
        "-r {regionsForOnTarget} -j {output.json} &> {log} && "
        "mv {nameBuild}_SAE/*_passSAE.bam {output.bam} &>> {log} && "
        "mv {nameBuild}_SAE/*_passSAE.bai {output.bai} &>> {log} && "
        "rm -rf {nameBuild}_SAE"
        
# Remove duplicates
rule RemoveDuplicates:
    input:
        bam = nameBuild+ "_sae.bam",
        bai = nameBuild+ "_sae.bai"
    output:
        bam = temp (nameBuild+ "_dupFree.bam"),
        bai = temp (nameBuild+ "_dupFree.bam.bai"),
        metrics = temp ("Logs/"+ nameBuild+ "_RemoveDuplicates.metrics")
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_RemoveDuplicates.log"
    shell:
        "sentieon driver -t {threads} -i {input.bam} --algo LocusCollector --fun score_info score.txt &> {log} && "
        "sentieon driver -t {threads} -i {input.bam} --algo Dedup --rmdup --score_info score.txt "
        "--metrics {output.metrics} {output.bam} &>> {log} && "
        "rm -f score.txt* "

# Parse fraction duplicates into json
rule ExtractFractionDuplicates:
    input:
        "Logs/"+ nameBuild+ "_RemoveDuplicates.metrics"
    output:
        "Json/"+ nameBuild+ "_RemoveDuplicates.json.gz"
    log:
        "Logs/"+ nameBuild+ "_ExtractFractionDuplicates.log"
    shell:
        "y=$(grep -A 1 'PERCENT_DUPLICATION' {input} | tail -n 1 | cut -f9) 2> {log} && "
        "echo \{{ > Json/{nameBuild}_RemoveDuplicates.json 2>> {log} && "
        "echo \\\"estimatedFractionDuplicateAlignments\\\": $y >> Json/{nameBuild}_RemoveDuplicates.json 2>> {log} && "
        "echo \}} >> Json/{nameBuild}_RemoveDuplicates.json 2>> {log} && "
        "gzip Json/{nameBuild}_RemoveDuplicates.json 2>> {log}"

# Indel realignment, needed for Sastrugie
rule IndelRealignment:
    input:
        bam = nameBuild+ "_dupFree.bam",
        bai = nameBuild+ "_dupFree.bam.bai"
    output:
        bam = temp (nameBuild+ "_realign.bam"),
        bai = temp (nameBuild+ "_realign.bam.bai")
    threads:
        allThreads    
    log:
        "Logs/"+ nameBuild+ "_Realign.log"
    shell:
        "sentieon driver -t {threads} -r {indexFasta} -i {input.bam} --algo Realigner -k {gIndel} -k {dbsnp} {output.bam} &> {log}"

# Base recalibration 
rule RecalibrateBases:
    input:
        bam = nameBuild+ "_realign.bam",
        bai = nameBuild+ "_realign.bam.bai"
    output:
        bam = "Bam/"+ nameBuild+ "_final.bam",
        bai = "Bam/"+ nameBuild+ "_final.bai"
    threads:
        allThreads    
    log:
        "Logs/"+ nameBuild+ "_RecalibrateBases.log"
    shell:
        "sentieon driver -r {indexFasta} -t {threads} -i {input.bam} --algo QualCal -k {dbsnp} "
        "-k {gIndel} -k {gSnp} recal_data.table &> {log} && "
        "sentieon driver -r {indexFasta} -t {threads} -i {input.bam} -q recal_data.table --algo QualCal "
        "-k {dbsnp} -k {gIndel} -k {gSnp} recal_data.table.post &>> {log} && "
        "sentieon driver -r {indexFasta} -t {threads} -i {input.bam} -q recal_data.table --algo ReadWriter "
        "{output.bam} &>> {log} && "
        "mv Bam/{nameBuild}_final.bam.bai {output.bai} &>> {log} && rm -f recal_data.table* "

# Run the Haplotype caller, needed for germline, not so much for somatic        
rule HaplotypeCaller:
    input:
        bam = "Bam/"+ nameBuild+ "_final.bam",
        bai = "Bam/"+ nameBuild+ "_final.bai"
    output:
        "Vcfs/"+ nameBuild+ "_Haplo.g.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_HaplotypeCaller.log"
    threads: 
        allThreads
    shell:
        "sentieon driver -r {indexFasta} -t {threads} -i {input.bam} --algo Haplotyper "
        "--emit_mode gvcf {output} &> {log} && rm -f Vcfs/*idx"

# Converts the bam to cram and then indexes the cram with samtools, must use 1.8, 1.9 is broken for cram conversion
rule Bam2Cram:
    input:
        bam = "Bam/"+ nameBuild+ "_final.bam",
       	bai = "Bam/"+ nameBuild+ "_final.bai"
    output:
        cram = "Bam/"+ nameBuild+ "_final.cram",
        crai = "Bam/"+ nameBuild+ "_final.cram.crai"
    log:
        "Logs/"+ nameBuild+ "_Bam2Cram.log"
    threads: 
        allThreads
    shell:
        "samtools view -@ {threads} {input.bam} -C -T {indexFasta} > {output.cram} 2> {log} && "
        "samtools index -@ {threads} {output.cram} 2>> {log} "
        
############################# QC ###############################

# QC, Merge paired alignments for unique observation QC
rule MergePairedAlignments:
    input:
        bam = "Bam/"+ nameBuild+ "_final.bam",
        bai = "Bam/"+ nameBuild+ "_final.bai"
    output:
        dir = directory( nameBuild+ "_MPA"),
        json = "Json/"+ nameBuild+ "_MergePairedAlignments.json.gz"   
    threads: 
        allThreads
    log:
        "Logs/"+ nameBuild+ "_MergePairedAlignments.log"
    shell:
        "{java} {useq}/MergePairedAlignments -b {input.bam} -d {output.dir} "
        "-j {output.json} -t {threads} &> {log}"

# QC, Generate read coverage QC metrics and bed pass fail files with Sam2USeq
rule Sam2USeq:
    input:
        mpa = nameBuild+ "_MPA"
    output:
        useq = nameBuild+ "_uniObReadCov.useq",
        cs = "QC/"+ nameBuild+ "_PerRegionCoverageStats.txt.gz",
        json = "Json/"+ nameBuild+ "_Sam2USeq.json.gz",
        bed = "QC/"+nameBuild+ "_Pass.bed.gz"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_Sam2USeq.log"
    shell:
        "{java} {useq}/Sam2USeq {useqSam2USeq} -f {input.mpa} "
        "-b {regionsForReadCoverage} -p {output.cs} -j {output.json} -n {nameBuild} &> {log} && "
        "cp {input.mpa}/*useq {output.useq} &>> {log} && "
        "mv -f {nameBuild}_Pass.bed.gz QC/ && "
        "mv -f {nameBuild}_Fail.bed.gz QC/"

# Tabix index all of the bed files
rule BedTabix:
    input:
        "QC/"+nameBuild+ "_Pass.bed.gz"
    output:
        "QC/"+nameBuild+ "_Pass.bed.gz.tbi"
    log:
        "Logs/"+ nameBuild+ "_BedTabix.log"
    shell:
        "{java} {useq}/BedTabix -t {htslib} -v QC/ &> {log}"
        
# QC, Convert the uniOb read coverage track to something that will play nicely with IGV and the UCSC genome browsers
rule USeq2UCSCBig:
    input:
        rc= nameBuild+ "_uniObReadCov.useq"
    output:
        "QC/"+ nameBuild+ "_uniObReadCov.bw"     
    log:
        "Logs/"+ nameBuild+ "_Useq2UCSCBig.log"
    shell:
        "{java} {useq}/USeq2UCSCBig -u {input.rc} -f "
        "-d {ucsc} &> {log} && "
        "mv -f {nameBuild}_uniObReadCov.bw {output} " 

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")

