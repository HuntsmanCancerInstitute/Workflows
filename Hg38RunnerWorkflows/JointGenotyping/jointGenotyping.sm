# Joint Genotyping of Haplotype called gVCFs
# 20 March 2019
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = config["name"] + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Resources
regionsForAnalysis = config["regionsForAnalysis"]
indexFasta = config["indexFasta"]
queryDataDir = config["queryDataDir"]
queryIndexDir = config["queryIndexDir"]
queryFileFilter	= config["queryFileFilter"]

# Filtering params
useqJointGenotypeVCFParser = config["useqJointGenotypeVCFParser"]

# Apps in the docker container
gatk = "/BioApps/GATK_3.8/GenomeAnalysisTK.jar"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
useq = "/BioApps/USeq/Apps"
vt = "/BioApps/vt_2June2015/vt"
htslib = "/BioApps/HTSlib_1.3"

############# Rules ##############

# Workflow trigger
rule VcfTabix:
    input:
        nameBuild+"_GenotypedVcfs"
    output:
        "DONE"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "{java} {useq}/VCFTabix -t {htslib} -v {input} &> {log} && touch DONE"

rule JointGenotypeVCFParser:
    input:
        nameBuild+ ".vcf.gz"
    output:
        nameBuild+"_GenotypedVcfs"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_JointGenotypeVCFParser.log"
    shell:
        "{java} {useq}/JointGenotypeVCFParser -v {input} -s {output} "
        "{useqJointGenotypeVCFParser} &> {log}"   	 

# Run the Haplotype caller
rule GenotypeGVCFs:
    input:
        "ToGenotype"
    output:
        vcf = temp (nameBuild+ "_jointGenotyped.vcf"),
	idx = temp (nameBuild+ "_jointGenotyped.vcf.idx")
    log:
        "Logs/"+ nameBuild+ "_GenotypeGVCFs.log"
    threads:
        allThreads
    shell:
        "ls ToGenotype/*vcf.gz > {nameBuild}_gvcf.list && "
        "{java} {gatk} -T GenotypeGVCFs --variant {nameBuild}_gvcf.list -o {output.vcf} "
        "-L {regionsForAnalysis} -R {indexFasta} &> {log} && rm -f {nameBuild}_gvcf.list"

# Decompose the genotyped vcf with Vt
rule VtDecompose:
    input:
        nameBuild+ "_jointGenotyped.vcf"
    output:
        temp (nameBuild+ ".vtDecom.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VtDecompose.log"
    threads:
        allThreads
    shell:
        "{vt} decompose -s {input} -o {output} &> {log} "

# Normalize the genotyped vcf with Vt
rule VtNormalize:
    input:
        nameBuild+ ".vtDecom.vcf.gz"
    output:
        temp (nameBuild+ ".vt.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VtNormalize.log"
    threads:
        allThreads
    shell:
        "{vt} normalize -o {output} -r {indexFasta} {input} &> {log} "

# Calculate the prior call frequency from a QueryAPI index, the config file should just specify the fileFilter
rule VCFCallFrequency:
    input:
        nameBuild+ ".vt.vcf.gz"
    output:
       temp (nameBuild+ ".vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VCFCallFrequency.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFCallFrequency -v {input} -s TempVCFCallFreq -f {queryFileFilter} "
        "-i {queryIndexDir} -d {queryDataDir} -m 0.075 &> {log} && "
        "mv -f TempVCFCallFreq/*.callFreq.vcf.gz {output} && rm -rf TempVCFCallFreq"

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
