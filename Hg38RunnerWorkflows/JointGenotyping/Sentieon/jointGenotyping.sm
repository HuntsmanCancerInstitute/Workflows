# Joint Genotyping of Haplotype called gVCFs
# 14 Dec 2020
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = config["name"] + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Resources
regionsForAnalysis = config["regionsForAnalysis"]
indexFasta = config["indexFasta"]
queryDataDir = config["queryDataDir"]
queryVcfFileFilter = config["queryVcfFileFilter"]
queryBedFileFilter = config["queryBedFileFilter"]
bioApps = config["bioApps"]

# Filtering params
useqJointGenotypeVCFParser = config["useqJointGenotypeVCFParser"]

# Apps in the DataBundle
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
useq = bioApps+ "/USeq/Apps"
vt = bioApps+ "/Vt/24Sept2020/vt"
htslib = bioApps+ "/HTSlib/1.10.2/bin"

############# Rules ##############

# Workflow trigger
rule VcfTabix:
    input:
        nameBuild+"_GenotypedVcfs"
    output:
        "DONE"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "{java} {useq}/VCFTabix -t {htslib} -v {input} &> {log} && touch DONE"

rule JointGenotypeVCFParser:
    input:
        nameBuild+ ".vcf.gz"
    output:
        directory(nameBuild+"_GenotypedVcfs")
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_JointGenotypeVCFParser.log"
    shell:
        "{java} {useq}/JointGenotypeVCFParser -v {input} -s {output} "
        "{useqJointGenotypeVCFParser} &> {log}"   	 

# Run the Sentieon Joint Genotyper
rule GenotypeGVCFs:
    input:
        "ToGenotype"
    output:
        vcf = temp (nameBuild+ "_jointGenotyped.vcf.gz"),
        tbi = temp (nameBuild+ "_jointGenotyped.vcf.gz.tbi")
    log:
        "Logs/"+ nameBuild+ "_GVCFtyper.log"
    threads:
        allThreads
    shell:
        "rm -rf /scratch/local/$USER/$SLURM_JOB_ID || true; "
        "mkdir -p /scratch/local/$USER/$SLURM_JOB_ID || true; "
        "sentieon driver --temp_dir /scratch/local/$USER/$SLURM_JOB_ID -r {indexFasta} "
        "--interval {regionsForAnalysis} -t {threads} "
        "--algo GVCFtyper {output.vcf} ToGenotype/*.g.vcf.gz &>> {log} && "
        "rm -rf /scratch/local/$USER/$SLURM_JOB_ID || true &>> {log} "

# Decompose the genotyped vcf with Vt
rule VtDecompose:
    input:
        nameBuild+ "_jointGenotyped.vcf.gz"
    output:
        temp (nameBuild+ ".vtDecom.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VtDecompose.log"
    threads:
        allThreads
    shell:
        "{vt} decompose -s {input} -o {output} &> {log} "

# Normalize the genotyped vcf with Vt and toss any records with an ALT of *
rule VtNormalize:
    input:
        nameBuild+ ".vtDecom.vcf.gz"
    output:
        temp (nameBuild+ ".vt.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VtNormalize.log"
    threads:
        allThreads
    shell:
        "{vt} normalize -o temp.vcf.gz -r {indexFasta} {input} &> {log} && "
        "gunzip -c temp.vcf.gz | awk '$5 != \"*\" {{ print }}' | gzip > {output} && "
        "rm -f temp.vcf.gz "

# Calculate the prior call frequency from a GQuery index
rule VCFCallFrequency:
    input:
        nameBuild+ ".vt.vcf.gz"
    output:
       nameBuild+ ".vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_VCFCallFrequency.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFCallFrequency -f {input} -s TempVCFCallFreq -v {queryVcfFileFilter} "
        "-b {queryBedFileFilter}  -d {queryDataDir} -m 0.075 &> {log} && "
        "mv -f TempVCFCallFreq/*.callFreq.vcf.gz {output} && rm -rf TempVCFCallFreq"

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
