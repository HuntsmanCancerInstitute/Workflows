# 7 February 2019
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_Hg38"

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
quarterThreads = int(round(halfThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Input
bam = config["bam"]

# Resources
starIndex = config["starIndex"]
hg38ChromSizes = config["hg38ChromSizes"]
refFlatGenes = config["refFlatGenes"]
rRNAIntervals = config["rRNAIntervals"]

# Apps in the docker container
samtools = "/BioApps/Samtools_1.9/samtools"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
picard = "/BioApps/Picard_2.17.2/picard.jar"
ucsc = "/BioApps/UCSC_6Aug2018"
star = "/BioApps/STAR-2.6.1a/STAR"

# Trigger rule
rule Organize:
    input:
        "Bam/"+ nameBuild+ ".bai",
        "QC/"+ nameBuild+ "_RelReadCovMinus.bw",
        "QC/"+ nameBuild+ "_RNASeqMetrics.txt"
    output:
        "DONE"
    shell:
        "rm -rf *.wig; touch DONE"

# Convert input Bam to fastq
rule Sam2Fastq:
    input:
        bam
    output:
        f1 = temp (nameBuild+ "_1.fastq.gz"),
        f2 = temp (nameBuild+ "_2.fastq.gz")
    log:
        "Logs/"+ nameBuild+ "_Sam2Fastq.log"
    threads:
        allThreads
    shell:
        "{java} {picard} SamToFastq INPUT={input} FASTQ={output.f1} "
        "SECOND_END_FASTQ={output.f2} TMP_DIR=. VALIDATION_STRINGENCY=SILENT &> {log}" 


# Run star to generate alignments, using the ENCODE params, emits a random multimapper, and generates relative read coverage tracks
rule StarAlignment:
    input:
        f1 = nameBuild+ "_1.fastq.gz",
        f2 = nameBuild+ "_2.fastq.gz"
    output:
        bam = "Bam/"+ nameBuild+ ".bam",
        wig1 = temp("Signal.Unique.str1.out.wig"),
        wig2 = temp("Signal.Unique.str2.out.wig")
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_StarAlignment.log",
    shell:
        "{star} --runThreadN {threads} --genomeDir {starIndex} --readFilesIn {input.f1} {input.f2} "
        "--readFilesCommand zcat -c --outFilterType BySJout --outFilterMultimapNmax 20 "
        "--alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterMismatchNmax 999 "
        "--outFilterMismatchNoverReadLmax 0.04 --alignIntronMin 20 --alignIntronMax 1000000 "
        "--alignMatesGapMax 1000000 --outSAMtype BAM SortedByCoordinate --outMultimapperOrder Random "
        "--outSAMmultNmax 1 --outWigType wiggle --outWigNorm RPM &> {log} && "
        "mv -f Aligned.sortedByCoord.out.bam {output.bam} &>> {log} && "
        "mv -f Log.final.out Logs/{nameBuild}_starAlignmentStats.txt && "
        "rm -rf _STARtmp/ SJ.out.tab Log.progress.out Log.out "
                
# Index the star bam
rule SamtoolsIndex:
    input:
        "Bam/"+ nameBuild+ ".bam"
    output:
        "Bam/"+ nameBuild+ ".bai"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_SamtoolsIndex.log"
    shell:
        "{samtools} index -@ {threads} {input} &> {log} && "
        "mv -f Bam/{nameBuild}.bam.bai {output} &>> {log} "

# Convert the wig tracks to compressed and indexed bigwig
rule WigToBigWig:
    input:
        minus = "Signal.Unique.str1.out.wig",
        plus = "Signal.Unique.str2.out.wig"
    output:
        p = "QC/"+ nameBuild+ "_RelReadCovPlus.bw",
        m = "QC/"+ nameBuild+ "_RelReadCovMinus.bw"     
    log:
        "Logs/"+ nameBuild+ "_WigToBigWig.log"
    threads:
        quarterThreads
    shell:
        "{ucsc}/wigToBigWig {input.minus} {hg38ChromSizes} {output.m} &> {log} && "
        "{ucsc}/wigToBigWig {input.plus} {hg38ChromSizes} {output.p} &>> {log} "

# Use Picard to pull RNASeq metrics
rule CollectRNASeqMetrics:
    input:
        b = "Bam/"+ nameBuild+ ".bam",
        i = "Bam/"+ nameBuild+ ".bai"
    output:
        "QC/"+ nameBuild+ "_RNASeqMetrics.txt"     
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_CollectRNASeqMetrics.log"
    shell:
        "{java} {picard} CollectRnaSeqMetrics REF_FLAT={refFlatGenes} " 
        "RIBOSOMAL_INTERVALS={rRNAIntervals} STRAND_SPECIFICITY=SECOND_READ_TRANSCRIPTION_STRAND "
        "I={input.b} O={output} &> {log} "


onerror:
    shell( "rm -f STARTED COMPLETE DONE; touch FAILED")
