# 19 Feb 2020
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Resources
tumorBam = config["tumorBam"]
normalBam = config["normalBam"]
indexFasta = config["indexFasta"]
dbsnp = config["dbsnp"]
regions = config["regionsForAnalysis"]
bpileup = config["bpileup"]
queryDataDir = config["queryDataDir"]
queryIndexDir = config["queryIndexDir"]
queryVcfFileFilter = config["queryVcfFileFilter"]
queryBedFileFilter = config["queryBedFileFilter"]

# Apps in docker image
useq = "/BioApps/USeq/Apps"
strelka = "/BioApps/Strelka_2.9.3"
manta = "/BioApps/Manta_1.4.0"
htsLib = "/BioApps/HTSlib_1.3"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"

# VCF variant filtering params
minTumorAlignmentDepth = config["minTumorAlignmentDepth"]
minTumorAltCount = config["minTumorAltCount"]
minNormalAlignmentDepth = config["minNormalAlignmentDepth"]
minTumorAF = config["minTumorAF"]
maxNormalAF = config["maxNormalAF"]
minTNRatio = config["minTNRatio"]
minTNDiff = config["minTNDiff"]
minBKZ = config["minBKZ"]
fdrTier = config["fdrTier"]

# Workflow trigger, final Rule, cleanup and tabix index the vcfs 
rule VcfTabix:
    input:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz.tbi"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "rm -rf VCFBkgFilt {nameBuild}_Strelka {nameBuild}_Manta snappy* && "
        "{java} {useq}/VCFTabix -t {htsLib} -v Vcfs/ &> {log}"


# Calls Manta for candidate indels
rule Manta:
    output:
        dir = nameBuild+ "_Manta",
        vcf = nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_Manta.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} &>> {log} && "
        "source /BioApps/Miniconda3/bin/activate python2 &>> {log} && "
        "{manta}/bin/configManta.py --exome "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--runDir={output.dir} &>> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate &>> {log}"

# Calls Strelka for tumor vs matched control normal analysis
rule Strelka:
    input:
        nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    output:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz",
        bed = "Bed/"+ nameBuild+ "_StrelkaCallableRegion.bed.gz"
    log:
        "Logs/"+ nameBuild+ "_Strelka.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} && source /BioApps/Miniconda3/bin/activate python2 &&"
        "{strelka}/bin/configureStrelkaSomaticWorkflow.py --exome --outputCallableRegions "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--indelCandidates={input} --callRegions={regions} --runDir={output.dir} &> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz Bed/{nameBuild}_StrelkaCallableRegion.bed.gz && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz.tbi Bed/{nameBuild}_StrelkaCallableRegion.bed.gz.tbi"

# Merge the Strelka snv and idel vcf files
rule StrelkaMerge:
    input:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz"
    output:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_StrelkaMerge.log"
    shell:
        "{java} {useq}/VCFMerger -o {output} -v {input.dir}/results/variants/ &> {log}"

# Applies a variety of filters
rule StrelkaFilter:
    input:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    output:
        temp (nameBuild+"_Strelka.filt.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_StrelkaFilter.log"
    shell:
        "{java} {useq}/StrelkaVCFParser -v {input} -t {minTumorAF} -f Vcfs "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} -a {minTumorAltCount} -e {fdrTier} &> {log} && "
        "mv Vcfs/{nameBuild}_Strelka.raw_Filtered.vcf.gz {output} &>> {log} "

# Use panel of normal bams to z-score the vcf records
rule VCFBkz:
    input:
        nameBuild+"_Strelka.filt.vcf.gz"
    output:
        temp (nameBuild+ "_bkz.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VCFBkz.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFBkz -v {input} -b {bpileup} -c {minNormalAlignmentDepth} "
        "-s TempVCFBkz -p {threads} -z {minBKZ} -u -l &> {log} && "
        "mv -f TempVCFBkz/{nameBuild}_Strelka.filt.bkz.vcf.gz {output} && "
        "rm -rf TempVCFBkz "

# Calculate the prior call frequency from a QueryAPI index, the config file should just specify the fileFilter
rule VCFCallFrequency:
    input:
        vcf = nameBuild+ "_bkz.vcf.gz"
    output:
         "Vcfs/" + nameBuild+ "_final.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_VCFCallFrequency.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFCallFrequency -f {input.vcf} -s TempVCFCallFreq -v {queryVcfFileFilter} "
        "-b {queryBedFileFilter}  -i {queryIndexDir} -d {queryDataDir} -m 0.075 &> {log} && "
        "mv -f TempVCFCallFreq/*.callFreq.vcf.gz {output} && rm -rf TempVCFCallFreq"


onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
