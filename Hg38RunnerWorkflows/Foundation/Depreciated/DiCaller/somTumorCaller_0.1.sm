# Tumor Somatic Variant Calling Workflow 
# 11 October 2018
# David.Nix@Hci.Utah.Edu

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))

# Resources
tumorBam = config["tumorBam"]
normalBam = config["normalBam"]
indexFasta = config["indexFasta"]
dbsnp = config["dbsnp"]
regions = config["regionsForAnalysis"]
mpileup = config["mpileup"]
queryDataDir = config["queryDataDir"]
queryIndexDir = config["queryIndexDir"]
queryFileFilter = config["queryFileFilter"]

# Apps in docker image
useq = "/BioApps/USeq_9.2.0/Apps"
strelka = "/BioApps/Strelka_2.9.3"
manta = "/BioApps/Manta_1.4.0"
lofreq = "/BioApps/Lofreq_star-2.1.3.1/bin/lofreq"
htsLib = "/BioApps/HTSlib_1.3"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"

# VCF variant filtering params
minTumorAlignmentDepth = config["minTumorAlignmentDepth"]
minTumorAltCount = config["minTumorAltCount"]
minNormalAlignmentDepth = config["minNormalAlignmentDepth"]
minTumorAF = config["minTumorAF"]
maxNormalAF = config["maxNormalAF"]
minTNRatio = config["minTNRatio"]
minTNDiff = config["minTNDiff"]
minBKZ = config["minBKZ"]
fdrTier = config["fdrTier"]

# Workflow trigger, final Rule, cleanup and tabix index the vcfs 
rule VcfTabix:
    input:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz.tbi"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "rm -rf VCFBkgFilt {nameBuild}_Lofreq {nameBuild}_Strelka "
        "{nameBuild}_Manta snappy* normal.b* tumor.b* && "
        "{java} {useq}/VCFTabix -t {htsLib} -v Vcfs/ &> {log}"


# Calls Manta for candidate indels
rule Manta:
    output:
        dir = nameBuild+ "_Manta",
        vcf = nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_Manta.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} &>> {log} && "
        "source /BioApps/Miniconda3/bin/activate python2 &>> {log} && "
        "{manta}/bin/configManta.py --exome "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--runDir={output.dir} &>> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate &>> {log}"

# Calls Strelka for tumor vs matched control normal analysis
rule Strelka:
    input:
        nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    output:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz",
        bed = "Bed/"+ nameBuild+ "_StrelkaCallableRegion.bed.gz"
    log:
        "Logs/"+ nameBuild+ "_Strelka.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} && source /BioApps/Miniconda3/bin/activate python2 &&"
        "{strelka}/bin/configureStrelkaSomaticWorkflow.py --exome --outputCallableRegions "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--indelCandidates={input} --callRegions={regions} --runDir={output.dir} &> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz Bed/{nameBuild}_StrelkaCallableRegion.bed.gz && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz.tbi Bed/{nameBuild}_StrelkaCallableRegion.bed.gz.tbi"

# Merge the Strelka snv and idel vcf files
rule StrelkaMerge:
    input:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz"
    output:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_StrelkaMerge.log"
    shell:
        "{java} {useq}/VCFMerger -o {output} -v {input.dir}/results/variants/ &> {log}"

# Applies a variety of filters
rule StrelkaFilter:
    input:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    output:
        temp (nameBuild+"_Strelka.filt.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_StrelkaFilter.log"
    shell:
        "{java} {useq}/StrelkaVCFParser -v {input} -t {minTumorAF} -f Vcfs "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} -a {minTumorAltCount} -e {fdrTier} &> {log} && "
        "mv Vcfs/{nameBuild}_Strelka.raw_Filtered.vcf.gz {output} &>> {log} "
        


############################# Lofreq ###############################

rule Lofreq:
    input:
        ignore = nameBuild+ "_Strelka"
    output:
        dir= nameBuild+ "_Lofreq",
        indels= nameBuild+ "_Lofreq/"+nameBuild+"_somatic_final.indels.vcf.gz",
        snvs= nameBuild+ "_Lofreq/"+nameBuild+"_somatic_final.snvs.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_Lofreq.log"
    threads: 
        allThreads
    shell:
        "mkdir -p {output.dir} &> {log} && source /BioApps/Miniconda3/bin/activate && "
        "gunzip -c {regions} > {output.dir}/regionsToAnalyze.bed && "
        "{lofreq} somatic --tumor-mtc-alpha 10.0 --indel-tumor-mtc-alpha 0.5 --call-indels "
        "-f {indexFasta} -o {nameBuild}_Lofreq/{nameBuild}_ -l {output.dir}/regionsToAnalyze.bed "
        "-n {normalBam} -t {tumorBam} -d {dbsnp} --threads {threads} &>> {log} && "
        "source /BioApps/Miniconda3/bin/deactivate && "
        "rm -rf {nameBuild}_Lofreq/*_relaxed.* {nameBuild}_Lofreq/*_raw.* {nameBuild}_Lofreq/*dbsnp* "
        "{nameBuild}_Lofreq/*stringent.*  &>> {log}"

rule LofreqMerge:
    input:
        indels= nameBuild+ "_Lofreq/"+nameBuild+"_somatic_final.indels.vcf.gz",
        snvs= nameBuild+ "_Lofreq/"+nameBuild+"_somatic_final.snvs.vcf.gz"
    output:
        "Vcfs/"+ nameBuild+"_Lofreq.raw.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_LofreqMerge.log"
    shell:
        "{java} {useq}/VCFMerger -v {nameBuild}_Lofreq -o {output} &> {log}"

rule LofreqFilter:
    input:
        "Vcfs/"+ nameBuild+ "_Lofreq.raw.vcf.gz"
    output:
        temp (nameBuild+"_Lofreq.filt.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_LofreqFilter.log"
    shell:
        "{java} {useq}/LofreqVCFParser -d {minTumorAlignmentDepth} -t {minTumorAF} "
        "-a -v {input} -r {minTumorAltCount} &> {log} && "
        "mv -f Vcfs/{nameBuild}_Lofreq.raw_Filtered.vcf.gz {output} &>> {log}"


############################# VCF Consensus and BKZ ###############################

rule VCFConsensus:
    input:
        st= nameBuild+"_Strelka.filt.vcf.gz",
        lf= nameBuild+"_Lofreq.filt.vcf.gz"
    output:
        temp (nameBuild+"_StLoConsensus.vcf.gz")
    log:
        "Logs/"+ nameBuild+"_VCFConsensus.log"
    threads:
        halfThreads
    shell:
        "{java} {useq}/VCFConsensus -p {input.st} -s {input.lf} -o {output} &> {log}"

# Use panel of normal bams to z-score the vcf records
rule VCFBackgroundChecker:
    input:
        nameBuild+"_StLoConsensus.vcf.gz"
    output:
        temp (nameBuild+ "_vbc.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VCFBackgroundChecker.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFBackgroundChecker -v {input} -m {mpileup} -c {minNormalAlignmentDepth} "
        "-s VCFBkgFilt -t {threads} -z {minBKZ} &> {log} && "
        "mv -f VCFBkgFilt/{nameBuild}_StLoConsensus.vcf.gz   {output} "

# Calculate the prior call frequency from a QueryAPI index, the config file should just specify the fileFilter
rule VCFCallFrequency:
    input:
        vcf = nameBuild+ "_vbc.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_VCFCallFrequency.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFCallFrequency -v {input.vcf} -s TempVCFCallFreq -f {queryFileFilter} "
        "-i {queryIndexDir} -d {queryDataDir} -m 0.075 &> {log} && "
        "mv -f TempVCFCallFreq/*.callFreq.vcf.gz {output} && rm -rf TempVCFCallFreq"

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")