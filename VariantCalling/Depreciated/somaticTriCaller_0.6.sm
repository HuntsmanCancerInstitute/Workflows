#Define the resources from the config file

## Base name to prepend on all files
name = config["name"]

## For messaging
email = config["email"]

## Bed file of regions to analyze
regionsForAnalysis = config["rA"]

## Panel of Normals
mpileup = config["mpileup"]

## Bam files
tumorBam = config["tBam"]
normalBam = config["nBam"]

## Threads and memory
allThreads = int(config["threads"])
halfThreads = int(round(allThreads/2,0))
allMemory = config["memory"]

## VCF variant filtering params
minTumorAlignmentDepth = config["mtad"]
minNormalAlignmentDepth = config["mnad"]
minTumorAF = config["mtaf"]
maxNormalAF = config["mnaf"]
minTNRatio = config["mr"]
minTNDiff = config["md"]
minZScore = config["zscore"]

## Apps
useq="/uufs/chpc.utah.edu/common/home/u0028003/BioApps/USeq/Apps"
picard = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Picard/2.1.1/picard.jar"
strelka = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Strelka/1.0.15/InstallDir"
gatk = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/GATK/3.7-0-gcfedb67/GenomeAnalysisTK.jar"
htsLib = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/HTSlib/1.3/bin"
lofreq = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/LoFreq/lofreq_star-2.1.2/bin/lofreq"

## Languages
java= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Java/1.8.0_65/bin/java -jar -Djava.io.tmpdir=. "

## References
indexFasta= "/uufs/chpc.utah.edu/common/home/u0028003/HCIAtlatl/data/Human/B37/human_g1k_v37_decoy_phiXAdaptr.fasta"
dbsnp = "/uufs/chpc.utah.edu/common/home/u0028003/HCIAtlatl/data/Human/B37/MuTect/dbsnp_132_b37.leftAligned.vcf"
cosmic = "/uufs/chpc.utah.edu/common/home/u0028003/HCIAtlatl/data/Human/B37/MuTect/b37_cosmic_v54_120711.vcf"

## File resources to check before launching
requiredFiles = [mpileup, regionsForAnalysis, tumorBam, normalBam, useq, picard, strelka, gatk, htsLib, lofreq, indexFasta, dbsnp, cosmic]

############# Rules ##############        

rule CleanUp:
    input:
        name+ "_Consensus.filt.vcf.gz",
        name+ "_MutectBams"
    shell:
        "rm -rf {name}_Strelka/ {name}_Mutect/ {name}_Lofreq/ {name}_StrelkaRegionFilter/ {name}_VCFBackgroundChecker/ && "
        "echo [`date`] rule CleanUp: COMPLETE && echo"

# Uses ls to check if all the required resources are present 
rule CheckResources:
    output:
        temp(name+ "_CheckResources.complete")
    log:
        name+ "_CheckResources.log"
    shell:
        "ls {requiredFiles} &> {log} && touch {output} && "
        "echo [`date`] rule CheckResources: COMPLETE && echo"
        
# Calls Strelka for tumor vs non matched control normal analysis
rule Strelka:
    input:
        name+ "_CheckResources.complete"
    output:
        dir = name+ "_Strelka",
        vcf1 = name+ "_Strelka/results/all.somatic.indels.vcf",
        vcf2 = name+ "_Strelka/results/all.somatic.snvs.vcf"
    log:
        name+ "_Strelka.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} && "
        "{strelka}/bin/configureStrelkaWorkflow.pl "
        "--normal={normalBam} --tumor={tumorBam} --ref={indexFasta} "
        "--config={strelka}/etc/strelka_config_bwa_relaxedIndel.ini "
        "--output-dir={output.dir} &> {log} && "
        "make -j {threads} -C {output.dir} &>> {log} && "
        "echo [`date`] rule Strelka: COMPLETE && echo "

rule StrelkaPostProc:
    input:
        dir = name+ "_Strelka",
        vcf1 = name+ "_Strelka/results/all.somatic.indels.vcf",
        vcf2 = name+ "_Strelka/results/all.somatic.snvs.vcf"
    output:
        vcf = name+"_Strelka.raw.vcf.gz",
        dir = name+"_StrelkaBams"
    log:
        name+ "_StrelkaPostProc.log"
    threads:
        halfThreads
    shell:
        "rm -f {input.dir}/results/passed* && "
        "{java} -Xmx{allMemory} {useq}/VCFMerger -o {output.vcf} -v {input.dir}/results/ &> {log} && "
        "mkdir -p {output.dir} && "
        "cp -f {input.dir}/realigned/normal.realigned.ba* {output.dir} && "
        "cp -f {input.dir}/realigned/tumor.realigned.ba* {output.dir} && "
        "echo [`date`] rule StrelkaPostProc: COMPLETE && echo "

rule StrelkaRegionFilter:
    input:
        name+"_Strelka.raw.vcf.gz"
    output:
        dir = temp(name+ "_StrelkaRegionFilter"),
        vcf = temp(name+ "_Strelka.regionFilt.vcf.gz")
    log:
        name+ "_StrelkaRegionFilter.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/VCFRegionFilter -v {input} -b {regionsForAnalysis} "
        "-s {output.dir} &> {log} && "
        "mv -f {output.dir}/*_int.vcf.gz {output.vcf} && "
        "echo [`date`] rule StrelkaRegionFilter: COMPLETE && echo "

rule StrelkaFilter:
    input:
        name+ "_Strelka.regionFilt.vcf.gz"
    output:
        vcf = name+ "_Strelka.filt.vcf.gz",
        txt = name+ "_Strelka.txt.gz"
    log:
        name+ "_StrelkaFilter.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/StrelkaVCFParser -v {input} -t {minTumorAF} "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} &> {log} && "
        "mv -f {name}_Strelka.regionFilt_Filtered.vcf.gz {output.vcf} && "
        "mv -f {name}_Strelka.regionFilt.txt.gz {output.txt} && "
        "echo [`date`] rule StrelkaFilter: COMPLETE && echo "


rule Lofreq:
    input:
        name+ "_Strelka"
    output:
        dir= temp(name+ "_Lofreq"),        
        indels= temp(name+ "_Lofreq/"+name+"_somatic_final.indels.vcf.gz"),
        snvs= temp(name+ "_Lofreq/"+name+"_somatic_final.snvs.vcf.gz")
    log:
        name+ "_lofreq.log"
    threads: 
        allThreads
    shell:
        "mkdir -p {output.dir} &> {log} && "
        "{lofreq} somatic --tumor-mtc-alpha 10.0 --indel-tumor-mtc-alpha 0.5 --call-indels "
        "-f {indexFasta} -o {name}_Lofreq/{name}_ -l {regionsForAnalysis} -n {normalBam} "
        "-t {tumorBam} --threads {threads} &>> {log} && "
        "rm -rf {name}_Lofreq/*_relaxed.* {name}_Lofreq/*_raw.* {name}_Lofreq/*stringent.* &>> {log} && "
        "echo [`date`] rule Lofreq: COMPLETE && echo "

rule LofreqMerge:
    input:
        indels= name+ "_Lofreq/"+name+"_somatic_final.indels.vcf.gz",
        snvs= name+ "_Lofreq/"+name+"_somatic_final.snvs.vcf.gz"
    output:
        name+"_Lofreq.raw.vcf.gz"
    log:
        name+ "_LofreqMerge.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/VCFMerger -v {name}_Lofreq -o {output} &> {log} && "
        "echo [`date`] rule LofreqMerge: COMPLETE && echo "

rule LofreqFilter:
    input:
        name+ "_Lofreq.raw.vcf.gz"
    output:
        name+"_Lofreq.filt.vcf.gz"
    log:
        name+ "_LofreqFilter.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/LofreqVCFParser -d {minTumorAlignmentDepth} -t {minTumorAF} "
        "-a -v {input} &> {log} && "
        "mv -f {name}_Lofreq.raw_Filtered.vcf.gz {output} &>> {log} && "
        "echo [`date`] rule LofreqFilter: COMPLETE && echo "

rule Mutect:
    input:
        name+ "_Lofreq"
    output:
        dir= name+ "_Mutect",
        vcf= name+"_Mutect.raw.vcf.gz",
        bam= name+ "_Mutect/mutect.realigned.bam"
    log:
        name+ "_Mutect.log"
    threads: 
        allThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/GatkRunner -t {halfThreads} -s {output.dir} -r {regionsForAnalysis} "
        "-b -c '{java} -Xmx5G {gatk} -T MuTect2 -I:tumor {tumorBam} -I:normal {normalBam} -mbq 20 "
        "-R {indexFasta} --dbsnp {dbsnp} --cosmic {cosmic} -dt NONE ' &> {log} && "
        "cat {output.dir}/gatk.raw.vcf | gzip > {output.vcf} && "
        "echo [`date`] rule Mutect: COMPLETE && echo "

rule SplitMutectBam:
    input:
        name+ "_Mutect/mutect.realigned.bam"
    output:
        name+ "_MutectBams"
    log:
        name+ "_SplitMutectBam.log"
    threads: 
        halfThreads
    shell:
        "mkdir -p {output} && "
        "{java} -Xmx{allMemory} -jar {picard} SplitSamByLibrary CREATE_INDEX=true "
        "MAX_RECORDS_IN_RAM=5000000 TMP_DIR=. VALIDATION_STRINGENCY=SILENT I={input} "
        "O={output} &> {log} && "
        "echo [`date`] rule SplitMutectBam: COMPLETE "

rule MutectFilter:
    input:
        name+"_Mutect.raw.vcf.gz"
    output:
        vcf = name+"_Mutect.filt.vcf.gz",
        txt = name+"_Mutect.txt.gz"
    log:
        name+ "_MutectFilter.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/MutectVCFParser -v {input} -t {minTumorAF} "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} &> {log} && "
        "mv -f {name}_Mutect.raw_Filtered.vcf.gz {output.vcf} && "
        "mv -f {name}_Mutect.raw.txt.gz {output.txt} && "
        "echo [`date`] rule MutectFilter: COMPLETE && echo "

rule VCFConsensus:
    input:
        mu= name+"_Mutect.filt.vcf.gz",
        sc= name+"_Lofreq.filt.vcf.gz",
        st= name+"_Strelka.filt.vcf.gz"
    output:
        temp (name+"_Consensus.vcf.gz")
    log:
        name+"_VCFConsensus.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/VCFConsensus -p {input.mu} -s {input.st} -o {name}_tempCon.vcf.gz &> {log} && "
        "{java} -Xmx{allMemory} {useq}/VCFConsensus -p {name}_tempCon.vcf.gz -s {input.sc} -o {output} &>> {log} && "
        "rm -f {name}_tempCon.vcf.gz && "
        "echo [`date`] rule VCFConsensus: COMPLETE && echo "

rule VCFBackgroundChecker:
    input:
        name+"_Consensus.vcf.gz"
    output:
        dir = temp(name+ "_VCFBackgroundChecker"),
        vcf = name+ "_Consensus.all.vcf.gz"
    log:
        name+ "_VCFBackgroundChecker.log"
    threads:
        allThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/VCFBackgroundChecker -v {input} -m {mpileup} -c {minNormalAlignmentDepth} "
        "-s {output.dir} -t {threads} -b 1 -u  &> {log} && "
        "mv -f {output.dir}/{name}_Consensus.vcf.gz {output.vcf} && "
        "echo [`date`] rule VCFBackgroundChecker: COMPLETE && echo "

rule MultiSampleVCFFilter:
    input:
        name+"_Consensus.all.vcf.gz"
    output:
        name+ "_Consensus.filt.vcf"
    log:
        name+ "_MultiSampleVCFFilter.log"
    threads:
        halfThreads    
    shell:
        "{java} -Xmx{allMemory} {useq}/MultiSampleVCFFilter -v {input} -d {minZScore} -p {output} &> {log} && "
        "echo [`date`] rule MultiSampleVCFFilter: COMPLETE && echo "

rule VCFTabix:
    input:
        name+"_Consensus.filt.vcf"
    output:
        name+ "_Consensus.filt.vcf.gz"
    log:
        name+ "_VCFTabix.log"
    threads:
        halfThreads
    shell:
        "{java} -Xmx{allMemory} {useq}/VCFTabix -v . -t {htsLib} -f &> {log} && "
        "echo [`date`] rule VCFTabix: COMPLETE && echo "

        
############# Messaging ##############
onerror:
    shell( "dir=`pwd`; mail -s \"Failed: {name} ($dir)\" {email} < {log}; sleep 4s")
onsuccess:
    shell( "dir=`pwd`; mail -s \"Complete: {name} ($dir)\" {email} < {log}; sleep 4s")
