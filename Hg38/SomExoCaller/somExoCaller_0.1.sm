# Tumor - Normal Somatic Variant Calling Workflow 
# 10 September 2018
# David.Nix@Hci.Utah.Edu

############ No need to modify anything in this document #############

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_" + config["genomeBuild"]

# Threads and memory
allThreads = int(config["allThreads"])
allRam = int(round(float(config["allRam"])))

# Resources
tumorBam = config["tumorBam"]
normalBam = config["normalBam"]
tumorBed = config["tumorBed"]
normalBed = config["normalBed"]
indexFasta = config["indexFasta"]
regions = config["regionsForAnalysis"]
mpileup = config["mpileup"]

# Apps in docker image
useq = "/BioApps/USeq_9.2.0/Apps"
strelka = "/BioApps/Strelka_2.9.3"
manta = "/BioApps/Manta_1.4.0"
htsLib = "/BioApps/HTSlib_1.3"
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"

# VCF variant filtering params
minTumorAlignmentDepth = config["minTumorAlignmentDepth"]
minTumorAltCount = config["minTumorAltCount"]
minNormalAlignmentDepth = config["minNormalAlignmentDepth"]
minTumorAF = config["minTumorAF"]
maxNormalAF = config["maxNormalAF"]
minTNRatio = config["minTNRatio"]
minTNDiff = config["minTNDiff"]
minBKZ = config["minBKZ"]
fdrTier = config["fdrTier"]

# Workflow trigger, final Rule, cleanup and tabix index the vcfs 
rule VcfTabix:
    input:
        "Vcfs/" + nameBuild+ "_final.vcf.gz",
        "Bed/" + nameBuild+ "_CoveredRegion.bed.gz.tbi"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz.tbi"
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_VcfTabix.log"
    shell:
        "rm -rf VCFBkgFilt Vcfs/{nameBuild}_Strelka.raw_Filtered.vcf.gz {nameBuild}_Strelka {nameBuild}_Manta && "
        "{java} {useq}/VCFTabix -t {htsLib} -v Vcfs/ &> {log}"


# Calls Manta for candidate indels
rule Manta:
    output:
        dir = nameBuild+ "_Manta",
        vcf = nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_Manta.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} &>> {log} && "
        "source /BioApps/Miniconda3/bin/activate python2 &>> {log} && "
        "{manta}/bin/configManta.py --exome "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--runDir={output.dir} &>> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate &>> {log}"

# Calls Strelka for tumor vs matched control normal analysis
rule Strelka:
    input:
        nameBuild+ "_Manta/results/variants/candidateSmallIndels.vcf.gz"
    output:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz",
        bed = "Bed/"+ nameBuild+ "_StrelkaCallableRegion.bed.gz"
    log:
        "Logs/"+ nameBuild+ "_Strelka.log"
    threads: 
        allThreads
    shell:
        "rm -rf {output.dir} && source /BioApps/Miniconda3/bin/activate python2 &&"
        "{strelka}/bin/configureStrelkaSomaticWorkflow.py --exome --outputCallableRegions "
        "--normalBam={normalBam} --tumorBam={tumorBam} --referenceFasta={indexFasta} "
        "--indelCandidates={input} --callRegions={regions} --runDir={output.dir} &> {log} && "
        "{output.dir}/runWorkflow.py -m local -g {allRam} -j {threads} "
        "--quiet &>> {log} && source /BioApps/Miniconda3/bin/deactivate && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz Bed/{nameBuild}_StrelkaCallableRegion.bed.gz && "
        "mv {output.dir}/results/regions/somatic.callable.regions.bed.gz.tbi Bed/{nameBuild}_StrelkaCallableRegion.bed.gz.tbi"

# Merge the Strelka snv and idel vcf files
rule StrelkaMerge:
    input:
        dir = nameBuild+ "_Strelka",
        vcf1 = nameBuild+ "_Strelka/results/variants/somatic.snvs.vcf.gz",
        vcf2 = nameBuild+ "_Strelka/results/variants/somatic.indels.vcf.gz"
    output:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_StrelkaMerge.log"
    shell:
        "{java} {useq}/VCFMerger -o {output} -v {input.dir}/results/variants/ &> {log}"

# Applies a variety of filters
rule StrelkaFilter:
    input:
        "Vcfs/" + nameBuild+"_Strelka.raw.vcf.gz"
    output:
        "Vcfs/" + nameBuild+"_Strelka.raw_Filtered.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_StrelkaFilter.log"
    shell:
        "{java} {useq}/StrelkaVCFParser -v {input} -t {minTumorAF} -f Vcfs "
        "-n {maxNormalAF} -u {minTumorAlignmentDepth} -o {minNormalAlignmentDepth} "
        "-d {minTNDiff} -r {minTNRatio} -a {minTumorAltCount} -e {fdrTier} &> {log} "

# Use panel of normal bams to z-score the vcf records
rule VCFBackgroundChecker:
    input:
        "Vcfs/" + nameBuild+ "_Strelka.raw_Filtered.vcf.gz"
    output:
        "Vcfs/" + nameBuild+ "_final.vcf.gz"
    log:
        "Logs/"+ nameBuild+ "_VCFBackgroundChecker.log"
    threads:
        allThreads
    shell:
        "{java} {useq}/VCFBackgroundChecker -v {input} -m {mpileup} -c {minNormalAlignmentDepth} "
        "-s VCFBkgFilt -t {threads} -z {minBKZ} &> {log} && "
        "mv -f VCFBkgFilt/{nameBuild}_Strelka.raw_Filtered.vcf.gz {output} "

# Find regions shared by the tumor and normal pass read coverage bed files, a relaxed estimate of 
# callable regions needed for the Query - VCFCallFrequency apps
rule FindSharedRegions:
    output:
        "Bed/" + nameBuild+ "_CoveredRegion.bed"
    log:
        "Logs/"+ nameBuild+ "_FindSharedRegions.log"
    shell:
        "{java} {useq}/FindSharedRegions -f {tumorBed} -s {normalBed} -r {output} &> {log}"

# Tabix index all of the bed files
rule BedTabix:
    input:
        "Bed/" + nameBuild+ "_CoveredRegion.bed"
    output:
        "Bed/" + nameBuild+ "_CoveredRegion.bed.gz.tbi"
    log:
        "Logs/"+ nameBuild+ "_BedTabix.log"
    shell:
        "{java} {useq}/BedTabix -t {htsLib} -v Bed/ &> {log}"

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")