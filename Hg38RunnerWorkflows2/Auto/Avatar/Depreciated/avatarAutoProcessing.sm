# 2 Oct 2023 
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

# General Resources
maxThreads = 50
halfThreads = 25
thirdThreads = 16
email = "david.nix@hci.utah.edu"
tnRunner= "/uufs/chpc.utah.edu/common/PE/hci-bioinformatics1/TNRunner"
tnRunnerWorkflows = tnRunner + "/Workflows"
avatarWorkflows = "/scratch/general/pe-nfs1/u0028003/Avatar/Auto/Workflows"

# Cloud Resources
patientMolRepo = "s3://hcibioinfo-patient-molecular-repo/Patients/"
molRepoIndex = "s3://hcibioinfo-patient-lists/MolecularRepo/"
dxToken = "/uufs/chpc.utah.edu/common/HIPAA/u0028003/BioApps/DNAnexus/token"

# GU Group
guEmail = "david.nix@hci.utah.edu,beverly.chigarira@hci.utah.edu,JongTaek.Kim@aruplab.com"
guBucket = "s3://hcibioinfo-gu-patient-molecular-repo/Patients/"

# HEM Group
hemEmail = "david.nix@hci.utah.edu,Nicola.Camp@hci.utah.edu,Myke.Madsen@hci.utah.edu"
hemPath = "/uufs/chpc.utah.edu/common/HIPAA/IRB_00088405-2/AVATAR/SourceData/"

# PHI Resources
subjectRegistry = "/uufs/chpc.utah.edu/common/PE/hci-bioinformatics1/PHI/Registry/"
bkupSubjectRegistry = "/uufs/chpc.utah.edu/common/PE/hci-bioinformatics1/Nix/PHI/RegistryBackupDontUse/"

# Apps, aws cli installed and in the path
java = "java -jar -Djava.io.tmpdir=. -Xmx5G"
useq = "/uufs/chpc.utah.edu/common/HIPAA/u0028003/BioApps/USeq/Apps"
htslib = "/uufs/chpc.utah.edu/common/HIPAA/u0028003/BioApps/HtsLib/1.15/bin"


############# Rules ##############

# Workflow trigger, final Rule, cleanup 
rule FinalCleanup:
    input:
        "Status/FetchResourceFiles_COMPLETE",
        "Status/AvatarDataWrangler_COMPLETE",
        "Status/DownloadCramFiles_COMPLETE",
        "Status/SyncMainRepo_COMPLETE",
        "Status/UploadGUDatasets_COMPLETE",
        "Status/BackupSubjectRegistry_COMPLETE",
        "Status/CopyHemDatasets_COMPLETE"
    output:
        "Status/ALL_COMPLETE"
    log:
        "Logs/finalCleanup.log"
    shell:
        "touch {output} &> {log}"
        # "rm -rf AJobs/ &> {log}; touch {output}"

rule FetchResourceFiles:
    output:
        "Status/FetchResourceFiles_COMPLETE"
    log:
        "Logs/fetchResourceFiles.log"
    threads:
        maxThreads
    shell:
        "dx login --noprojects --token $(cat {dxToken}) &> {log}; "
        "dx select --name HCI_Molecular_Data --level VIEW &>> {log}; "
        "rm -rf ResourceFiles &>> {log}; "
        "mkdir ResourceFiles &>> {log};"
        "dx download -f --no-progress HCI_Molecular_Data:/Avatar_MolecularData_hg38/Manifests_and_QC_Files/*_HCI_ClinicalMolLinkage_V4.csv -o ResourceFiles/ &>> {log};"
        "dx download -f --no-progress HCI_Molecular_Data:/Avatar_MolecularData_hg38/Manifests_and_QC_Files/*_HCI_WES_QC_Metrics.csv -o ResourceFiles/ &>> {log};"
        "dx ls HCI_ORIEN_AVATAR_MOLECULAR_DATA:/Whole_Exome/alignment_crams/*cram | sort | uniq > ResourceFiles/avatar_WesCramList.txt 2>> {log};"
        "dx ls HCI_ORIEN_AVATAR_MOLECULAR_DATA:/RNAseq/alignment_crams/*cram | sort | uniq > ResourceFiles/avatar_RNACramList.txt 2>> {log};"
        "aws s3 ls {patientMolRepo} --recursive > ResourceFiles/hci_AWSRepoList.txt 2>> {log};"
        "touch {output}"

# Look for new Avatar datasets to process, uses the PHI to identify the patient in the registry
rule avatarDataWrangler:
    input:
        "Status/FetchResourceFiles_COMPLETE"
    output:
        c = "Status/AvatarDataWrangler_COMPLETE",
        d = "ResourceFiles/dxDwnldCmds.txt"
    log:
        "Logs/avatarDataWrangler.log"
    threads:
        halfThreads
    shell:
        "{java} {useq}/AvatarDataWrangler -r ResourceFiles -j AJobs "
        "-s {subjectRegistry} -d {output.d} -t ResourceFiles/SMM_PHI &> {log};"
        "touch {output.c}"

rule DownloadCramFiles:
    input:
        "ResourceFiles/dxDwnldCmds.txt"
    output:
        "Status/DownloadCramFiles_COMPLETE"
    log:
        "Logs/downloadCramFiles.log"
    threads:
        maxThreads
    shell:
        "dx login --noprojects --token $(cat {dxToken}) &> {log}; "
        "dx select --name HCI_Molecular_Data --level VIEW &>> {log}; "
        "while read -r line; do echo 'Starting: '$line &>> {log}; $line &>> {log}; done < {input}; "
        "touch {output}"

# Run TNRunner2, a tool for coordinating the execution of many containerized snakemake workflows to process the data
rule TNRunner2:
    input:
       "Status/DownloadCramFiles_COMPLETE"
    output:
        "Status/TNRunner2_COMPLETE"
    log:
        "Logs/tnRunner2.log"
    threads:
        maxThreads
    shell:
        "{java} {useq}/TNRunner2 -p AJobs "
        "-e {avatarWorkflows}/DnaAlignQC "
        "-t {avatarWorkflows}/RnaAlignQC "
        "-m {tnRunnerWorkflows}/Msi "
        "-a {tnRunnerWorkflows}/Annotator "
        "-q {tnRunnerWorkflows}/IlluminaGermline "
        "-h {tnRunnerWorkflows}/GATKGermline/HaplotypeCalling "
        "-j {tnRunnerWorkflows}/GATKGermline/JointGenotyping "
        "-y {tnRunnerWorkflows}/CopyAnalysis/ "
        "-k {tnRunner}/CopyRatioBkgs/Avatar "
        "-c {tnRunnerWorkflows}/SomaticCaller "
        "-B {tnRunner}/BamPileups/Avatar/ "
        "-L {tnRunnerWorkflows}/LoH "
        "-b {tnRunnerWorkflows}/SampleConcordance "
        "-x 250 -l -P Mixed,IDTv2 &> {log}; "
        "rm -rf AJobs/IlluminaJointGenotyping_* AJobs/GATKJointGenotyping &>> {log}; "
        "touch {output}" 

# "-f {tnRunnerWorkflows}/StarFusion ", some samples taking > 2 days, dropping

# Copy files needed for GQuery
rule GQuery:
    input:
        "Status/TNRunner2_COMPLETE"
    output:
        "Status/GQuery_COMPLETE"
    log:
        "Logs/gquery.log"
    threads:
        thirdThreads
    shell:
        "rm -rf ForGQuery/; mkdir -p ForGQuery/Data/Hg38/Germline/Avatar/Vcf ForGQuery/Data/Hg38/Germline/Avatar/Bed ForGQuery/Data/Hg38/Somatic/Avatar/Vcf ForGQuery/Data/Hg38/Somatic/Avatar/Bed ForGQuery/Data/Hg38/Somatic/Avatar/Fusion ForGQuery/Data/Hg38/Somatic/Avatar/Cnv/ &> {log}; "
        "for x in $(ls AJobs/*/Avatar/*/SomaticVariantCalls/*_Anno/Vcfs/*.anno.vcf.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Somatic/Avatar/Vcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/SomaticVariantCalls/*_Illumina/Bed/*CoveredRegion.bed.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Somatic/Avatar/Bed/$coreId'_'$fileName &>> {log}; done;  "
        "for x in $(ls AJobs/*/Avatar/*/GermlineVariantCalling/*_GATK_Anno/Vcfs/*.anno.vcf.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Germline/Avatar/Vcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/Alignment/*_NormalDNA/QC/*.PassRC.bed.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Germline/Avatar/Bed/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/CopyAnalysis/*_GATKCopyRatio/Results/*seg.pass.bed.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Somatic/Avatar/Cnv/$coreId'_'$fileName &>> {log}; done;  "
        "for x in $(ls AJobs/*/Avatar/*/RNAAnalysis/*_STARFusion/*.sf.bed.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGQuery/Data/Hg38/Somatic/Avatar/Fusion/$coreId'_'$fileName &>> {log}; done;  "
        "touch {output} "

# Copy files needed for cBioPortal
rule cBioPortal:
    input:
        "Status/TNRunner2_COMPLETE"
    output:
        "Status/CBioPortal_COMPLETE"
    log:
        "Logs/cBioPortal.log"
    threads:
        thirdThreads
    shell:
        "rm -rf ForCBioPortal; mkdir -p ForCBioPortal/Germline/Avatar/Vcf ForCBioPortal/Somatic/Avatar/Vcf ForCBioPortal/Somatic/Avatar/Fusion ForCBioPortal/Somatic/Avatar/Cnv/ &> {log}; "
        "cp ResourceFiles/*ClinicalMolLinkage* ForCBioPortal/ &>> {log}; "
        "for x in $(ls AJobs/*/Avatar/*/SomaticVariantCalls/*_Anno/Vcfs/*.anno.vcf.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForCBioPortal/Somatic/Avatar/Vcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/GermlineVariantCalling/*_GATK_Anno/Vcfs/*.anno.vcf.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForCBioPortal/Germline/Avatar/Vcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/CopyAnalysis/*_GATKCopyRatio/Results/*called.anno.seg 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForCBioPortal/Somatic/Avatar/Cnv/$coreId'_'$fileName &>> {log}; done;  "
        "for x in $(ls AJobs/*/Avatar/*/RNAAnalysis/*_STARFusion/*.sf.bed.gz* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForCBioPortal/Somatic/Avatar/Fusion/$coreId'_'$fileName &>> {log}; done;  "
        "touch {output} "

rule TPM4cBioPortal:
    input:
        "Status/CBioPortal_COMPLETE"
    output:
        "ForCBioPortal/aggregateTPM_ForCBio.txt.gz"
    log:
        "Logs/TPM4cBioPortal.log"
    threads:
        thirdThreads
    shell:
        "rm -rf AggregateTPM &> {log}; mkdir -p AggregateTPM/RSEM AggregateTPM/TPM &>> {log}; cd AggregateTPM; "
        "cp ../*Jobs/*/*/*/Alignment/*TumorRNA/Quantitation/RSEM/*TumorRNA_Hg38.genes.results RSEM/ &>> ../{log}; "
        "files=(RSEM/*) &>> ../{log}; "
        "firstFile=${{files[0]}} &>> ../{log}; "
        "java -jar -Xmx1G ~/USeqApps/PrintSelectColumns -i 0 -f $firstFile -n 1 &>> ../{log}; "
        "mv RSEM/*.xls geneIds.txt &>> ../{log}; "
        "java -jar -Xmx1G ~/USeqApps/PrintSelectColumns -i 5 -f RSEM/ -n 1 &>> ../{log}; "
        "mv RSEM/*xls TPM/ &>> ../{log}; cd TPM/; "
        "for x in *xls; do name=$(echo $x | awk -F'_TumorRNA_Hg38.genes.PSC.xls' '{{print $1}}'); mv $x $name; done ;"
        "ls -1 | tr '\\n' '\\t' > ../aggregateTPM.txt ;"
        "echo >> ../aggregateTPM.txt ;"
        "paste ../geneIds.txt * >> ../aggregateTPM.txt ;"
        "cd ../; "
        "java -jar -Xmx20G ~/USeqApps/NormalizedCountCBioFormater "
        "   -e {tnRunner}/AnnotatorData/TpmVstRNASeqParsing/ens106GeneId2Symbol.txt.gz "
        "   -n aggregateTPM.txt &>> ../{log}; "
        "mv aggregateTPM_ForCBio.txt.gz ../ForCBioPortal/ &>> ../{log}; "
        "cd ../; rm -rf AggregateTPM &>> {log}"  

# For GCs
rule GeneticCounselors:
    input:
        "Status/TNRunner2_COMPLETE"
    output:
        "Status/GeneticCounselors_COMPLETE"
    log:
        "Logs/geneticCounselors.log"
    threads:
        thirdThreads
    shell:
        "rm -rf ForGeneticCounselors/; mkdir -p ForGeneticCounselors/GermlineROI/GatkVcf ForGeneticCounselors/GermlineROI/IlluminaVcf ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs ForGeneticCounselors/GermlineROI/CoCalled/AVP/VcfsWithCalls/ ForGeneticCounselors/GermlineROI/CoCalled/AVP/Cram ForGeneticCounselors/GermlineROI/AllCrams ForGeneticCounselors/GermlineROI/CoCalled/Vcfs/  &> {log}; "
        "for x in $(ls AJobs/*/Avatar/*/GermlineVariantCalling/*_GATK_Anno/Vcfs/ROI/*filt.roi.vcf.gz 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGeneticCounselors/GermlineROI/GatkVcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/GermlineVariantCalling/*_Illumina_Anno/Vcfs/ROI/*filt.roi.vcf.gz 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && cp $x ForGeneticCounselors/GermlineROI/IlluminaVcf/$coreId'_'$fileName &>> {log}; done; "
        "for x in $(ls AJobs/*/Avatar/*/Alignment/*NormalDNA/Alignment/*cram* 2> /dev/null || true); do fileName=$(basename $x); coreId=$(echo $x | cut -d'/' -f2); [ -f $x ] && ln -s $(realpath $x) ForGeneticCounselors/GermlineROI/AllCrams/$coreId'_'$fileName &>> {log}; done; "
        "echo Consensus &>> {log}; "
        "for x in ForGeneticCounselors/GermlineROI/GatkVcf/*vcf.gz; "
        "   do "
        "   name=`basename $x | awk -F'_GATK_Anno_Hg38.anno.filt.roi.vcf.gz' '{{print $1}}'`; "
        "   java -jar -Xmx10G ~/USeqApps/VCFConsensus -p $x -s ForGeneticCounselors/GermlineROI/IlluminaVcf/$name'_Illumina_Anno_Hg38.anno.filt.roi.vcf.gz' -o ForGeneticCounselors/GermlineROI/CoCalled/Vcfs/$name'_GatkIllum.roi.vcf.gz' -c -u &>> {log} &>> {log}; "
        "done; "
        "echo AnnotatedVcfParser &>> {log}; "
        "java -jar -Xmx10G ~/USeqApps/AnnotatedVcfParser -v ForGeneticCounselors/GermlineROI/CoCalled/Vcfs -s ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs -y ~/TNRunner/GermlineFilteringConfigs/strictGermline_AnnotatedVcfParser.config.txt -C 12Sept2023 -T ~/TNRunner/GermlineFilteringConfigs/bestRefSeqForACMGPlus.txt &>> {log}; "
        "rm ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/*_Fail.vcf.gz &>> {log}; "
        "mv ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/*.xls.gz  ForGeneticCounselors/GermlineROI/CoCalled/AVP/ &>> {log}; "
        "mv ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/impactedGenes.txt.gz  ForGeneticCounselors/GermlineROI/CoCalled/AVP/ &>> {log}; "
        "java -jar -Xmx1G ~/USeqApps/VCF2Bed -v ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/ -p 500 -s ForGeneticCounselors/GermlineROI/CoCalled/AVP/Bed/ &>> {log}; "
        "java -jar -Xmx10G ~/USeqApps/BedTabix -v ForGeneticCounselors/GermlineROI/CoCalled/AVP/Bed/  -t ~/BioApps/HtsLib/1.15/bin/ &>> {log}; "
        "echo SamtoolsView &>> {log}; "
        "module load samtools/1.16 &>> {log}; "
        "for x in ForGeneticCounselors/GermlineROI/CoCalled/AVP/Bed/*bed.gz; "
        "   do "
        "   name=$(echo $x | awk -F'_GatkIllum.roi_PassPad500bp.bed.gz' '{{print $1}}'); "
        "   name=$(basename $name); "
        "   samtools view --region-file $x -M "
        "   -T ~/TNRunner/GATKResourceBundleAug2021/Homo_sapiens_assembly38.fasta "
        "   -@ 10 --write-index "
        "   -o ForGeneticCounselors/GermlineROI/CoCalled/AVP/Cram/$name.cram "
        "   ForGeneticCounselors/GermlineROI/AllCrams/$name'_NormalDNA_Hg38.cram' &>> {log}; "
        "   mv ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/$name'_'*'.vcf.gz' ForGeneticCounselors/GermlineROI/CoCalled/AVP/VcfsWithCalls/$name'.vcf.gz' &>> {log}; "
        "done; "
        "echo CleaupOrg &>> {log}; "
        "rm -rf ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs/ &>> {log}; "
        "mv ForGeneticCounselors/GermlineROI/CoCalled/AVP/VcfsWithCalls ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs &>> {log}; "
        "java -jar -Xmx10G ~/USeqApps/VCFTabix -v ForGeneticCounselors/GermlineROI/CoCalled/AVP/Vcfs  -t ~/BioApps/HtsLib/1.15/bin/ &>> {log}; "
        "mv ForGeneticCounselors/GermlineROI/CoCalled/AVP/* ForGeneticCounselors/GermlineROI/ &>> {log}; "
        "rm -rf ForGeneticCounselors/GermlineROI/CoCalled ForGeneticCounselors/GermlineROI/AllCrams ForGeneticCounselors/GermlineROI/GatkVcf/ ForGeneticCounselors/GermlineROI/IlluminaVcf/  &>> {log}; "
        "touch {output} &>> {log}; "

# Generate aggregate QC data
rule AggregateQC:
    input:
        "Status/TNRunner2_COMPLETE"
    output:
        "Status/AggregateQC_COMPLETE"
    log:
        "Logs/aggregateQC.log"
    shell:
        "{java} {useq}/AggregateQCStats2 -s AggregateQC/ -j AJobs/ &> {log}; "
        "touch {output}"

# Clean up the job directories
rule JobCleaner:
    input:
        "Status/CBioPortal_COMPLETE",
        "Status/GQuery_COMPLETE",
        "Status/GeneticCounselors_COMPLETE",
        "Status/AggregateQC_COMPLETE",
        "ForCBioPortal/aggregateTPM_ForCBio.txt.gz"
    output:
        "Status/JobCleaner_COMPLETE"
    log:
        "Logs/jobCleaner.log"
    threads:
        halfThreads
    shell:
        "{java} {useq}/JobCleaner -r AJobs/ -e '.tbi,.crai,.bai,COMPLETE' -n 'Logs,RunScripts' &> {log}; "
        "touch {output}"

# Sync cleaned analysis with main mol bio repo
rule SyncMainRepo:
    input:
         "Status/JobCleaner_COMPLETE"
    output:
        "Status/SyncMainRepo_COMPLETE"
    log:
        "Logs/syncMainRepo.log"
    threads:
        thirdThreads
    shell:
        "echo STARTING &> {log};"
        "aws s3 sync --only-show-errors AJobs/ {patientMolRepo} &>> {log}; "
        "touch {output}; echo COMPLETE &>> {log};"

rule UploadGUDatasets:
    input:
         "Status/JobCleaner_COMPLETE"
    output:
        "Status/UploadGUDatasets_COMPLETE"
    log:
        "Logs/uploadGUDatasets.log"
    threads:
        thirdThreads
    shell:
        "echo STARTING &> {log}; rm -rf ForGUGroup; mkdir ForGUGroup; cd ForGUGroup;"
        "for x in $(ls ../AJobs/*/Avatar/*/ClinicalReport/*_GU_*.json 2> /dev/null || true); "
        "do coreId=$(echo $x | cut -d'/' -f3); [ ! -L $coreId ] && ln -s ../AJobs/$coreId .; done;"
        "cd ../;"
        "d=$(date +'%m_%d_%Y');"
        "phiLinks=GU_Avatar_$d'_PHI.txt';"
        "head -n 1 {subjectRegistry}/currentRegistry_* > $phiLinks;"
        "for x in $(ls ForGUGroup/); do grep $x {subjectRegistry}/currentRegistry_* >> $phiLinks; done;"
        "n=$(cat $phiLinks | wc -l);"
        "if [[ $n -gt 0 ]]; then aws s3 sync ForGUGroup/ {guBucket} --only-show-errors --follow-symlinks "
        "--profile GU &>> {log}; echo $n' new Avatar patient datasets have been uploaded into {guBucket} "
        "See and SAVE the attached file to associate coreIds with patient identifiers.' | "
        "mailx -r noreply.bioinfo@hci.utah.edu -a $phiLinks -s 'PHI - New Avatar Datasets '$d "
        "{guEmail}; fi; "
        "touch {output}; echo COMPLETE &>> {log}"

# Backup subject registry with PHI
# Hold off on syncing PHI until we have the approved AWS PHI policies in place
# aws s3 sync /uufs/chpc.utah.edu/common/PE/hci-bioinformatics1/PHI/Registry/ \
#     s3://hcibioinfo-patient-molecular-repo/PHI/Registry/ --quiet
rule BackupSubjectRegistry:
    input:
         "Status/SyncMainRepo_COMPLETE"
    output:
        "Status/BackupSubjectRegistry_COMPLETE"
    log:
        "Logs/backupSubjectRegistry.log"
    shell:
        "rsync -rtq {subjectRegistry} {bkupSubjectRegistry} &> {log}; "
        "touch {output}"

rule CopyHemDatasets:
    input:
         "Status/JobCleaner_COMPLETE",
         "Status/AggregateQC_COMPLETE"
    output:
        "Status/CopyHemDatasets_COMPLETE"
    log:
        "Logs/copyHemDatasets.log"
    threads:
        halfThreads
    shell:
        "rm -rf ForHemGroup; mkdir ForHemGroup; cd ForHemGroup;"
        "for x in $(ls ../AJobs/*/Avatar/*/ClinicalReport/*_HEM_*.json 2> /dev/null || true); "
        "do coreId=$(echo $x | cut -d'/' -f3); [ ! -L $coreId ] && ln -s ../AJobs/$coreId .; done;"
        "cd ../;"
        "d=$(date +'%m_%d_%Y');"
        "phiLinks=HEM_Avatar_$d'_PHI.txt';"
        "head -n 1 {subjectRegistry}/currentRegistry_* > $phiLinks;"
        "for x in $(ls ForHemGroup/); do grep $x {subjectRegistry}currentRegistry_* >> $phiLinks; done;"
        "n=$(cat $phiLinks | wc -l);"
        "if [[ $n -gt 1 ]]; then rsync -rtL ForHemGroup/ {hemPath}Patients/ &> {log};"
        "echo $n' new Avatar patient datasets have been uploaded into the HEME repo on Redwood.' | "
        "mailx -r noreply.bioinfo@hci.utah.edu -s 'New HEM Avatar Datasets '$d "
        "{hemEmail}; fi; cp -f $phiLinks {hemPath} &>> {log}; cp -f ResourceFiles/*ClinicalMolLinkage* {hemPath} &>> {log}; "
        "d=$(date +'%m_%d_%Y'); cp -f AggregateQC/qcStats.xls {hemPath}$d'_qcStats.xlsx' &>> {log}; "
        "touch {output}"
