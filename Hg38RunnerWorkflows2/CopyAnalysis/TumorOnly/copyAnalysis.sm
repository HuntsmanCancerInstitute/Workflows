# GATK Copy Ratio Calling with USeq filtering
# 5 April 2023
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Input files
tumorBam = config["tumorBam"]
vcf = config["vcf"]
bed = config["bed"]
nameBuild = str(config["name"])+"_Hg38"

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
allRam = int(round(float(config["allRam"])))
halfRam = int(round(allRam/2,0))

# Resources
bkg = config["bkg"]
intervals = config["list"]
indexFasta = config["dataBundle"] +"/"+ config["indexFasta"]
dictFasta = config["dataBundle"] +"/"+ config["dictFasta"]
geneTable = config["dataBundle"] +"/"+ config["geneTable"]
stdChroms = config["dataBundle"] +"/Bed/hg38StdChromLengths.bed.gz"

# Apps in the container
java = "java -jar -Djava.io.tmpdir=. " + "-Xmx" + str(allRam) + "G"
useq = "/BioApps/USeq/Apps"
ucsc = "/BioApps/UCSC/13Sept2021"
htslib= "/BioApps/Htslib/1.15.1/bin"

############# Rules ##############

# Workflow trigger
rule OrganizeResults:
    input:
        "Results/"+nameBuild+ ".fractionCopyRatio.txt",
        "Results/"+nameBuild+ ".called.seg.pass.bed.gz.tbi",
        "Results/"+ nameBuild+ ".tumor.cr.bw",
        "Results/"+ nameBuild+ ".tumor.af.bw"
    output:
        "COMPLETE"
    shell:
        "cd ModelSegments && mkdir Seg Param Igv HetAF && mv *.igv.* Igv/ && mv *param Param/ && "
        "mv *seg Seg/ && mv *tsv HetAF/ && cd ../ && rm -rf Anno {nameBuild}.germline.snv.vcf.idx *Hg38.hets.txt.gz* *Hg38.tumor.cr.txt.gz* && "
        "touch {output}"

# Collect tumor counts
rule CollectTumorCounts:
    output:
        temp (nameBuild+ ".tumor.hdf5")
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_CollectTumorCounts.log"
    shell:
        "gatk CollectReadCounts -I {tumorBam} -L {intervals} --interval-merging-rule OVERLAPPING_ONLY "
        "-O {output} -R {indexFasta} &> {log}"
   		   
# Denoise tumor counts
rule DenoiseTumorCounts:
    input:
        nameBuild+ ".tumor.hdf5"
    output:
        temp (nameBuild+ ".tumor.cr.tsv") 
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_DenoiseTumorCounts.log"
    shell:
        "gatk --java-options '-Xmx{halfRam}G' DenoiseReadCounts -I {input} "
        "--count-panel-of-normals {bkg} --standardized-copy-ratios tumor.delete.tsv --denoised-copy-ratios "
        "{output} &> {log} && rm -rf tumor.delete.tsv"

# Extract snvs from germline calls
rule SelectSnvVariants:
    output:
        temp (nameBuild+ ".germline.snv.vcf")
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_SelectSnvVariants.log"
    shell:
        "gatk SelectVariants --variant {vcf} --output {output} "
        "--select-type-to-include SNP &> {log} "

# Collect counts from tumor over germline snvs
rule CollectTumorSnvCounts:
    input:
        vcf = nameBuild+ ".germline.snv.vcf"
    output:
        temp (nameBuild+ ".tumor.snv.ac.tsv")
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_CollectTumorSnvCounts.log"
    shell:
        "gatk --java-options '-Xmx{halfRam}G' CollectAllelicCounts -L {input} -I {tumorBam} "
        "-R {indexFasta} -O {output} &> {log}"

# Group adjacent copy ratio regions
rule ModelSegments:
    input:
        tAc = nameBuild+ ".tumor.snv.ac.tsv",
        dnCR = nameBuild+ ".tumor.cr.tsv"
    output:
        "ModelSegments/"+ nameBuild+ ".cr.seg",
        "ModelSegments/"+ nameBuild+ ".hets.tsv",
        "ModelSegments/"+ nameBuild+ ".modelFinal.seg"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_ModelSegments.log"
    shell:
        "rm -rf ModelSegments && mkdir ModelSegments && "
        "gatk --java-options '-Xmx{halfRam}G' ModelSegments "
        "--denoised-copy-ratios {input.dnCR} "
        "--allelic-counts {input.tAc} "
        "--output ModelSegments --output-prefix {nameBuild} &> {log}"

# Call copy ratio segments +/- or non change 0
rule CallCopyRatioSegments:
    input:
        "ModelSegments/"+ nameBuild+ ".cr.seg"
    output:
        seg = "ModelSegments/"+ nameBuild+ ".called.seg",
        igv = "ModelSegments/"+ nameBuild+ ".called.igv.seg"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_CallCopyRatioSegments.log"
    shell:
        "gatk CallCopyRatioSegments --input {input} --output {output.seg} &> {log}"


# Plot model segments with R
rule PlotModeledSegments:
    input:
        dnCR = nameBuild+ ".tumor.cr.tsv",
        hets = "ModelSegments/"+ nameBuild+ ".hets.tsv",
        segs = "ModelSegments/"+ nameBuild+ ".modelFinal.seg"
    output:
        "ModelSegments/Plots/"+ nameBuild+ ".modeled.png"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_PlotModeledSegments.log"
    shell:
        "rm -rf ModelSegments/Plots && mkdir ModelSegments/Plots && "
        "gatk PlotModeledSegments "
        "--sequence-dictionary {dictFasta} --minimum-contig-length 46709983 "
        "--output ModelSegments/Plots --output-prefix {nameBuild} "
        "--denoised-copy-ratios {input.dnCR} "
        "--allelic-counts {input.hets} "
        "--segments {input.segs} &> {log}"


# Convert denoised copy ratios to bw graph tracks for the tumor and matched normal
rule CopyRatio2Bw:
    input:
        t = nameBuild+ ".tumor.cr.tsv"
    output:
        t = "Results/"+ nameBuild+ ".tumor.cr.bw"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_CopyRatio2Bw.log"
    shell:
        "grep -v ^@ {input.t} > {input.t}.txt  2> {log} && "
        "{java} {useq}/PrintSelectColumns -n 1 -i 0,1,2,3,3 -f {input.t}.txt &>> {log} && "
        "mkdir -p {nameBuild}.tumor.cr  &>> {log} && "
        "mv {input.t}.PSC.xls {nameBuild}.tumor.cr/{input.t}.bed &>> {log} && "
        "{java} {useq}/Bed2Bar -f {nameBuild}.tumor.cr -v H_sapiens_Dec_2013 &>> {log} && "
        "{java} {useq}/Bar2USeq -f . &>> {log} && "
        "{java} {useq}/USeq2UCSCBig -u . -d {ucsc} || true &>> {log} && "
        "mv -f */*.cr.bw Results/ &>> {log} && "
        "rm -rf {nameBuild}.tumor.cr  *.cr.tsv.txt "

# Convert heterozygous allele frequencies to bw graph tracks for the tumor
rule HeterozygousAllelicFrequency2Bw:
    input:
        t = "ModelSegments/"+ nameBuild+ ".hets.tsv"
    output:
        t = "Results/"+ nameBuild+ ".tumor.af.bw"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_HeterozygousAllelicFrequency2Bw.log"
    shell:
        "rm -rf HetTemp && mkdir HetTemp && "
        "grep -v ^@ {input.t} | grep -v ^CONTIG > HetTemp/{nameBuild}.tumor.af.txt  2> {log} && "
        "{java} {useq}/Text2USeq -o  -f HetTemp -c 0 -b 1 -v 3,2 -g H_sapiens_Dec_2013 &>> {log} && "
        "{java} {useq}/USeq2UCSCBig -u HetTemp -d {ucsc} &>> {log} && "
        "mv -f HetTemp/*.af.bw Results/ &>> {log} && "
        "rm -rf HetTemp "

# Filter and tabix the het and copy ratios
rule IndexHetAndCopyRatios:
    input:
        tCr = nameBuild+ ".tumor.cr.tsv",
        tAf = "ModelSegments/"+ nameBuild+ ".hets.tsv"
    output:
        tCr = nameBuild+ ".tumor.cr.txt.gz",
        tAf = nameBuild+ ".hets.txt.gz"
    log:
        "Logs/"+ nameBuild+ "_IndexHetAndCopyRatios.log"
    shell:
        "grep -vE '(@|CONTIG)' {input.tCr} > {nameBuild}.tumor.cr.txt 2> {log} && "
        "{htslib}/bgzip {nameBuild}.tumor.cr.txt &>> {log} && "
        "{htslib}/tabix -s 1 -b 2 -e 3 {output.tCr} &>> {log} && "
        "grep -vE '(@|CONTIG)' {input.tAf} > {nameBuild}.hets.txt 2>> {log} && "
        "{htslib}/bgzip {nameBuild}.hets.txt &>> {log} && "
        "{htslib}/tabix -s 1 -b 2 -e 2 {output.tAf} &>> {log}"

# Annotate and filter segment calls
rule GatkCalledSegmentAnnotator:
    input:
        seg = "ModelSegments/"+ nameBuild+ ".called.seg",
        tCr = nameBuild+ ".tumor.cr.txt.gz",
        tAf = nameBuild+ ".hets.txt.gz",
    output:
        s = "Results/"+nameBuild+ ".called.anno.seg",
        p = "Results/"+nameBuild+ ".called.seg.pass.bed",
        e = "Results/"+nameBuild+ ".called.seg.xls"
    threads:
        halfThreads
    params:
        minT = config["minTumorCopyRatio"]
    log:
        "Logs/"+ nameBuild+ "_GatkCalledSegmentAnnotator.log"
    shell:
        "{java} {useq}/GatkCalledSegmentAnnotator -r Results -s {input.seg} -t {input.tCr} "
        "-u {input.tAf} -g {geneTable} -c {params.minT} &> {log} "

# Calculate fraction interrogated bps that overlap a copy ratio region
rule FractionCopyRatio:
    input:
        "Results/"+nameBuild+ ".called.anno.seg"
    output:
        "Results/"+nameBuild+ ".fractionCopyRatio.txt"
    threads:
        halfThreads
    log:
        "Logs/"+ nameBuild+ "_FractionCopyRatio.log"
    shell:
        "grep Pass {input} > passing.seg || true 2> {log} && "
        "{java} {useq}/PrintSelectColumns -f passing.seg -i 1,2,3,5 &>> {log} && "
        "grep '-' passing.PSC.xls > del.bed || true 2>> {log} && "
        "grep -v '-' passing.PSC.xls > amp.bed || true 2>> {log} && "
        "numDel=$({java} {useq}/FindSharedRegions -f del.bed -s {bed} -r delCommon.bed | grep 'Total BP' | cut -d$'\\t' -f1)  2>> {log} && "
        "numAmp=$({java} {useq}/FindSharedRegions -f amp.bed -s {bed} -r ampCommon.bed | grep 'Total BP' | cut -d$'\\t' -f1) 2>> {log} && "
        "numTot=$(echo print $numDel + $numAmp | perl) 2>> {log} && "
        "numInt=$({java} {useq}/FindSharedRegions -f {bed} -s {stdChroms} -r ignore.bed | grep 'Total BP' | cut -d$'\\t' -f1) 2>> {log} && "
        "fracDel=$(echo print $numDel/$numInt | perl) 2>> {log} && "
        "fracAmp=$(echo print $numAmp/$numInt | perl) 2>> {log} && "
        "fracCnv=$(echo print $numTot/$numInt | perl) 2>> {log} && "
        "echo $numAmp' Amp bps' &> {output} &&"
        "echo $numDel' Del bps' &>> {output} &&"
        "echo $numInt' Int bps' &>> {output} &&"
        "echo $fracAmp' Amp frac' &>> {output} &&"
        "echo $fracDel' Del frac' &>> {output} &&"
        "echo $fracCnv' CNV frac' &>> {output} &&"
        "rm -rf passing.seg passing.PSC.xls del.bed amp.bed delCommon.bed ampCommon.bed ignore.bed &>> {log}"

# Tabix index all of the bed files
rule BedTabix:
    input:
        "Results/"+nameBuild+ ".called.seg.pass.bed"
    output:
        "Results/"+nameBuild+ ".called.seg.pass.bed.gz.tbi"
    log:
        "Logs/"+ nameBuild+ "_BedTabix.log"
    shell:
        "{java} {useq}/BedTabix -t {htslib} -v Results/ &> {log}"

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
