# Hg38 Exome Alignment and QC Workflow 
# 20 Jan 2022
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

############ No need to modify anything in this document #############

# Params from config, see xxx.sing for details
nameBuild = str(config["name"]) + "_Hg38"
dataBundle = config["dataBundle"]
analysisRegions = dataBundle+ "/"+ config["analysisRegions"]
indexFasta = dataBundle+ "/"+ config["indexFasta"]
alignmentFile = config["alignmentFile"]
tmpDir = config["tmpDir"]
gatk = "/BioApps/GATK/gatk/gatk"

# Threads and memory
allRam = int(round(float(config["allRam"])))
allThreads = int(config["allThreads"])
allThreadsMinThree = allThreads - 3
halfThreads = int(round(allThreads/2,0)) - 1

rule Cleanup:
    output:
        "COMPLETE"
    input:
        "Vcfs/"+ nameBuild+ ".g.vcf.gz",
        "Vcfs/"+ nameBuild+ ".g.vcf.gz.tbi"
    shell:
        "touch {output}; rm -rf *.bam.sbi Vcfs/snappy* Vcfs/realigned.bai &> /dev/null || true"


# Extract and uncompress alignments over user regions of interest, speeds up workflow by a 1/3rd
rule ROIAlignmentExtraction:
    output:
        bam= temp (nameBuild+ "_ROI.bam"),
        bai = temp (nameBuild+ "_ROI.bam.bai")
    log:
        "Logs/"+ nameBuild+ "_ROIAlignmentExtraction.log"
    threads:
        allThreads
    shell:
        "samtools view --threads {threads} --reference {indexFasta} "
        "--no-PG --use-index -o {output.bam}##idx##{output.bai} -u -L {analysisRegions} "
        "--write-index {alignmentFile} &> {log} "

# Create base recalibration table
rule BaseRecalibrator:
    input:
        bam = nameBuild+ "_ROI.bam",
        bai = nameBuild+ "_ROI.bam.bai"
    output:
        temp (nameBuild+ "_ROI.br.table")
    log:
        "Logs/"+ nameBuild+ "_BaseRecalibrator.log"
    threads:
        allThreads
    shell:
        "{gatk} --java-options '-Djava.io.tmpdir={tmpDir} -Xmx{allRam}G -XX:ParallelGCThreads=2' " 
        "BaseRecalibratorSpark --spark-master local[{allThreadsMinThree}] "
        "-I {input.bam} -R {indexFasta} -O {output} --tmp-dir {tmpDir} --output-shard-tmp-dir {tmpDir} "
        "--known-sites {dataBundle}/GATKResourceBundleAug2021/dbsnp_146.hg38.vcf.gz "
        "--known-sites {dataBundle}/GATKResourceBundleAug2021/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz "
        "--known-sites {dataBundle}/Vcfs/Homo_sapiens_assembly38.known_indels.vcf.gz "
        "--known-sites {dataBundle}/GATKResourceBundleAug2021/1000G_phase1.snps.high_confidence.hg38.vcf.gz "
        "&> {log}"

# Output recalibrated bam
rule ApplyBQSR:
    input:
        bam = nameBuild+ "_ROI.bam",
        bai = nameBuild+ "_ROI.bam.bai",
        table = nameBuild+ "_ROI.br.table"
    output:
        bam = temp (nameBuild+ "_Recal.bam"),
        bai = temp (nameBuild+ "_Recal.bam.bai")
    log:
        "Logs/"+ nameBuild+ "_ApplyBQSR.log"
    threads:
        allThreads
    shell:
        "{gatk} --java-options '-Djava.io.tmpdir={tmpDir} -Xmx{allRam}G -XX:ParallelGCThreads=2' " 
        "ApplyBQSRSpark --spark-master local[{allThreadsMinThree}] "
        "-bqsr {input.table} -I {input.bam} -R {indexFasta} -O {output.bam} "
        "--tmp-dir {tmpDir} --output-shard-tmp-dir {tmpDir}/ApplyBQSRSparkShard "
        "&> {log}"

# Chunked haplotype caller, 8x increased speed, with output bam -b option
rule HaplotypeCaller:
    input:
        bam = nameBuild+ "_Recal.bam",
        bai = nameBuild+ "_Recal.bam.bai"
    output:
        v= temp ("Vcfs/"+ nameBuild+ ".unsorted.g.vcf.gz"),
        b= "Alignment/"+ nameBuild+ ".bam"
    log:
        "Logs/"+ nameBuild+ "_HaplotypeCaller.log"
    threads:
        allThreads
    shell:
        "java -jar -Xmx{allRam}G /BioApps/USeq/Apps/GatkRunner -b -u -p 4 -g 5 -r {analysisRegions} "
        "-s Vcfs -c \'{gatk} --java-options \'-Xmx5G\' HaplotypeCaller -I {input.bam} -R {indexFasta} "
        "--tmp-dir {tmpDir} -ERC GVCF\' &> {log} && mv Vcfs/realigned.bam {output.b} && "
        "mv Vcfs/gatk.raw.vcf.gz {output.v} &>> {log}"

# Sort the combo
rule VtSort:
    input:
        "Vcfs/"+ nameBuild+ ".unsorted.g.vcf.gz"
    output:
        temp ("Vcfs/"+ nameBuild+ ".sorted.g.vcf.gz")
    log:
        "Logs/"+ nameBuild+ "_VtSort.log"
    threads:
        halfThreads
    shell:
        "/BioApps/Vt/1Sept2021/vt sort {input} -o {output} &> {log} "


rule VCFTabix:
    input:
        "Vcfs/"+ nameBuild+ ".sorted.g.vcf.gz"
    output:
        v = "Vcfs/"+ nameBuild+ ".g.vcf.gz",
        i = "Vcfs/"+ nameBuild+ ".g.vcf.gz.tbi"
    log:
        "Logs/"+ nameBuild+ "_VCFTabix.log"
    threads:
        allThreads
    shell:
        "java -jar -Xmx{allRam}G /BioApps/USeq/Apps/VCFTabix -v {input} -t /BioApps/Htslib/1.13/bin "
        "&> {log} && mv {input} {output.v} &>> {log} && mv {input}.tbi {output.i} &>> {log} && "
        "touch {input} &>> {log}"

## Wait until it is out of beta - "HaplotypeCallerSpark --spark-master local[{allThreadsMinThree}] "

onerror:
    shell( "rm -f STARTED COMPLETE; touch FAILED")
