# Alignment and QC for RNASeq samples
# 22 March 2023
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

# Base name to prepend on all files
nameBuild = str(config["name"]) + "_Hg38"

# Threads and memory
allThreads = int(config["allThreads"])
halfThreads = int(round(allThreads/2,0))
quarterThreads = int(round(halfThreads/4,0))
allRam = int(round(float(config["allRam"])))

# Resources
adapterR1=config["adapterR1"]
adapterR2=config["adapterR2"]

# DataBundle from config =/uufs/chpc.utah.edu/common/PE/hci-bioinformatics1/atlatl/data
dataBundle = config["dataBundle"]+ "/Human/GRCh38"
chrom = dataBundle + "/chrom.sizes"
fqsConfig = config["dataBundle"] +"/Human/Hg38/TNRunner/redwood_fastq_screen_rRNA.conf"
analysisRegions = config["dataBundle"] +"/Human/Hg38/TNRunner/hg38AllGeneExonsPad175bp.bed.gz"

# for release 106 and 100bp
# use 100bp for reads at and over 100bp, use the star50 for short reads
starIndex = dataBundle+ "/release106/star100"
gtf= dataBundle +"/release106/Homo_sapiens.GRCh38.106.gtf"
refflat = dataBundle +"/release106/Homo_sapiens.GRCh38.106.refflat"
riboint = dataBundle +"/release106/Homo_sapiens.GRCh38.106.rRNA.interval"
rsemIndex = dataBundle +"/release106/rsem/RSEM"

fastaIndex = dataBundle + "/Homo_sapiens.GRCh38.dna.primary_assembly.fa"
cramIndex = config["cramAlignmentIndex"]
mappingQuality=config["mappingQuality"]
baseQuality=config["baseQuality"]

# Trigger rule to run particular analysis
## If you're not going to run SampleConcordance, remove the '"Alignment/"+ nameBuild+ "_bp.txt.gz"' to skip bamPileup file generation. This is time consuming and only needed for T/N Exome+ RNASeq runs.
rule MultiQC:
    input:
        "Alignment/"+ nameBuild+ "_bp.txt.gz",
        "QC/FastqScreen/"+ nameBuild+ "_1_screen.txt",
        "QC/FastQC/"+ nameBuild+ "_2_fastqc.zip",
        "Quantitation/RSEM/"+ nameBuild+ ".genes.results",
        "Quantitation/FeatureCounts/"+ nameBuild+ ".biotypes",
        "QC/Picard/"+ nameBuild+ ".rnaMetrics.txt",
        "Quantitation/IGV/"+ nameBuild+ ".multiple.bw",
        "Alignment/"+ nameBuild+ ".cram"
    output:
        c= "COMPLETE",
        m= "QC/"+ nameBuild+ "_multiqc_report.html"
    log:
        "Logs/"+ nameBuild+ "_MultiQC.log"
    shell:
        "multiqc --outdir QC/ --title {nameBuild} --force . && touch {output.c} &> {log}"

# Look for the required resources
rule CheckFiles:
    output:
        temp ("FileCheckOK")
    log:
        "Logs/"+ nameBuild+ "_CheckFiles.log"
    shell:
        "echo dataBundle: &> {log} && ls {dataBundle} &>> {log} && "
        "echo chrom: &>> {log} && ls {chrom} &>> {log} && "
        "echo starIndex: &>> {log} && ls {starIndex} &>> {log} && "
        "echo fastaIndex: &>> {log} && ls {fastaIndex} &>> {log} && "
        "echo analysisRegions: &>> {log} && ls {analysisRegions} &>> {log} && "
        "echo gtf: &>> {log} && ls {gtf} &>> {log} && "
        "echo refflat: &>> {log} && ls {refflat} &>> {log} && "
        "echo riboint: &>> {log} && ls {riboint} &>> {log} && "
        "echo rsemIndex: &>> {log} && ls {rsemIndex}* &>> {log} && "
        "echo fqsConfig: &>> {log} && ls {fqsConfig} &>> {log} && "
        "touch {output}"

# If fastq aren't present look for a cram and convert it to fastq otherwise uncompresses the paired fastq into the TempFastq dir. The uncompression is needed since cutadapt often throws gzip errors yet gunzip -t shows no issues, arrg.
rule Fastq:
    input:
        "FileCheckOK"
    output:
        fq1 = temp ("TempFastq/"+ nameBuild+ ".1.fq"),
        fq2 = temp ("TempFastq/"+ nameBuild+ ".2.fq")
    log:
        "Logs/"+ nameBuild+ "_Fastq.log"
    threads:
        allThreads
    shell:
        "echo 'Attempting to find two fastq files ending in q.gz or a cram file that can be converted to fastq...' &> {log};"
        "rm -rf TempFastq; mkdir TempFastq; shopt -s nullglob; fq=(*q.gz); len=${{#fq[@]}}; "
        "if [ $len -eq 2 ]; then "
        "echo 'Two fastq.gz files found, uncompressing into TempFastq/' &>> {log}; "
        "echo -n 'Fastq1: ' &>> {log}; realpath ${{fq[0]}} &>> {log}; "
        "echo -n 'Fastq2: ' &>> {log}; realpath ${{fq[1]}} &>> {log}; "
        "gunzip -c ${{fq[0]}} > {output.fq1} 2>> {log}; "
        "gunzip -c ${{fq[1]}} > {output.fq2} 2>> {log}; "
        "else "
        "echo 'Fastq files not found, attempting to find cram file for conversion...' &>> {log}; "
        "echo -n 'Cram: ' &>> {log}; realpath *cram &>> {log} && "        
        "echo 'Collating cram and exporting fastq...' &>> {log} && "
        "tmp=$(realpath TempFastq) &>> {log} && "
        "export REF_CACHE=$tmp &>> {log} && "
        "samtools collate --threads {halfThreads} -Ouf --reference {cramIndex} *.cram TempFastq/ | "
        "samtools fastq --threads {halfThreads} --reference {cramIndex} -1 {output.fq1} -2 {output.fq2} -0 /dev/null -s /dev/null - &>> {log}; "
        "fi && "
        "echo -n 'fastqReadOne : ' &>> {log} && realpath {output.fq1} &>> {log} && "
        "echo -n 'fastqReadTwo : ' &>> {log} && realpath {output.fq2} &>> {log} "

# Cutadapt to trim fastq
rule Cutadapt:
    input:
        fq1 = "TempFastq/"+ nameBuild+ ".1.fq",
        fq2 = "TempFastq/"+ nameBuild+ ".2.fq"
    output:
        fq1 = temp ( nameBuild+ "_1.fq"),
        fq2 = temp ( nameBuild+ "_2.fq")
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_Cutadapt.log"
    shell:
        "cutadapt -j {threads} -O 6 -m 20 -o {output.fq1} -p {output.fq2} "
        "-a {adapterR1} -A {adapterR2} "
        "{input.fq1} {input.fq2} &> {log} && rm -rf TempFastq/ &>> {log}"

# Look for contaminants
rule FastqScreen:
    input:
        nameBuild+ "_1.fq"
    output:
        "QC/FastqScreen/"+ nameBuild+ "_1_screen.html",
        "QC/FastqScreen/"+ nameBuild+ "_1_screen.txt"
    threads:
        quarterThreads
    log:
        "Logs/"+ nameBuild+ "_FastqScreen.log"
    shell:
        "fastq_screen --threads {threads} --subset 1000000 --outdir QC/FastqScreen "
        "--conf {fqsConfig} --aligner bowtie2 {input} &> {log}"

# Check fastq data quality
rule FastQC:
    input:
        fq1 = nameBuild+ "_1.fq",
        fq2 = nameBuild+ "_2.fq"
    output:
        "QC/FastQC/"+ nameBuild+ "_2_fastqc.html",
        "QC/FastQC/"+ nameBuild+ "_2_fastqc.zip"
    threads:
        quarterThreads
    log:
        "Logs/"+ nameBuild+ "_FastQC.log"
    shell:
        "fastqc -T {threads} -f fastq {input.fq1} -o QC/FastQC &> {log} && "
        "fastqc -T {threads} -f fastq {input.fq2} -o QC/FastQC &>> {log}"

# Run star to generate alignments, emits a random multimapper, and generates relative read coverage tracks
rule StarAlignment:
    input:
        fq1 = nameBuild+ "_1.fq",
        fq2 = nameBuild+ "_2.fq"
    output:
        bam = temp ("Alignment/"+ nameBuild+ ".bam"),
        stats = "QC/STAR/"+ nameBuild+ ".Log.final.out",
        trans = temp ("Aligned.toTranscriptome.out.bam"),
        bg1 = temp ("Signal.Unique.str1.out.bg"),
        bg2 = temp ("Signal.UniqueMultiple.str1.out.bg")
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_StarAlignment.log",
    shell:
        "STAR --genomeDir {starIndex} --readFilesIn {input.fq1} {input.fq2} --runThreadN {allThreads} "
        "--twopassMode Basic --outSAMtype BAM SortedByCoordinate --outBAMsortingBinsN 800 --limitBAMsortRAM {allRam}000000000 "
        "--quantMode TranscriptomeSAM --outWigType bedGraph --outWigStrand Unstranded --seedPerWindowNmax 30 &> {log} && "
        "mv -f Aligned.sortedByCoord.out.bam {output.bam} &>> {log} && "
        "mv Log.final.out {output.stats} &>> {log} && "
        "rm -rf _STAR* SJ.out.tab Log.out Log.progress.out "

# Index the star bam
rule SamtoolsIndex:
    input:
        "Alignment/"+ nameBuild+ ".bam"
    output:
        bai = temp("Alignment/"+ nameBuild+ ".bam.bai"),
        stats = "QC/Samtools/"+ nameBuild+ ".idxstats"
    threads:
        quarterThreads
    log:
        "Logs/"+ nameBuild+ "_SamtoolsIndex.log"
    shell:
        "samtools index -@ {threads} {input} &> {log} && "
        "samtools idxstats -@ {threads} {input} | sort -V > {output.stats} "

# Transcript level abundance estimation with RSEM
rule RSEM:
    input:
        "Aligned.toTranscriptome.out.bam"
    output:
        "Quantitation/RSEM/"+ nameBuild+ ".genes.results",
        "Quantitation/RSEM/"+ nameBuild+ ".isoforms.results",
        directory ("Quantitation/RSEM/"+ nameBuild+ ".stat")
    threads:
        allThreads
    log:
        "Logs/"+ nameBuild+ "_RSEM.log"
    shell:
        "rsem-calculate-expression --paired-end -p {threads} --alignments --strandedness reverse "
        "--no-bam-output {input} {rsemIndex} Quantitation/RSEM/{nameBuild} &> {log}"

# Summary transcript counts
rule FeatureCounts:
    input:
        bam = "Alignment/"+ nameBuild+ ".bam",
        bai = "Alignment/"+ nameBuild+ ".bam.bai"
    output:
        c = "Quantitation/FeatureCounts/"+ nameBuild+ ".counts",
        b = "Quantitation/FeatureCounts/"+ nameBuild+ ".biotypes"
    threads:
        quarterThreads
    log:
        "Logs/"+ nameBuild+ "_FeatureCounts.log"
    shell:
        "featureCounts -T {threads} -p --countReadPairs -s 2 --largestOverlap -a {gtf} -o {output.c} {input.bam} &> {log} && "
        "featureCounts -T {threads} -p --countReadPairs -s 2 --largestOverlap -a {gtf} -o {output.b} -g gene_biotype "
        "{input.bam} &>> {log}"

# QC metrics from Picard
rule CollectRnaSeqMetrics:
    input:
        bam = "Alignment/"+ nameBuild+ ".bam",
        bai = "Alignment/"+ nameBuild+ ".bam.bai"
    output:
        "QC/Picard/"+ nameBuild+ ".rnaMetrics.txt"
    threads:
        2
    log:
        "Logs/"+ nameBuild+ "_CollectRnaSeqMetrics.log"
    shell:
        "java -jar -Xmx20G /BioApps/Picard/2.26.2/picard.jar CollectRnaSeqMetrics  REF_FLAT={refflat} "
        "STRAND=SECOND_READ_TRANSCRIPTION_STRAND RIBOSOMAL_INTERVALS={riboint} I={input.bam} "
        "O={output} &> {log} "

# Convert bam to cram
rule SamtoolsCram:
    input:
        "Alignment/"+ nameBuild+ ".bam"
    output:
        cram = "Alignment/"+ nameBuild+ ".cram",
        crai = "Alignment/"+ nameBuild+ ".cram.crai"
    threads:
        quarterThreads
    log:
        "Logs/"+ nameBuild+ "_SamtoolsCram.log"
    shell:
        "samtools view -C -T {fastaIndex} -o {output.cram} -@ {threads} --write-index {input} &> {log}"

# BamPileup file for Read Coverage, Sample Concordance, and ultra sensitive somatic variant calling
rule BamPileup:
    input:
        bam = "Alignment/"+ nameBuild+ ".bam",
        bai = "Alignment/"+ nameBuild+ ".bam.bai"
    output:
        bp = "Alignment/"+ nameBuild+ "_bp.txt.gz",
        index = "Alignment/"+ nameBuild+ "_bp.txt.gz.tbi"
    log:
        "Logs/"+ nameBuild+ "_BamPileup.log"
    threads:
        halfThreads
    shell:
        "java -jar -Xmx{allRam}G /BioApps/USeq/Apps/BamPileup -b {input.bam} -r {analysisRegions} -f {fastaIndex} -a "
        "-a -s {output.bp} -p {threads} -t /BioApps/Htslib/1.13/bin -q {baseQuality} -m {mappingQuality} &> {log} "

# Convert graphs
rule BedGraphToBigWig:
    input:
        bg1 = "Signal.Unique.str1.out.bg",
        bg2 = "Signal.UniqueMultiple.str1.out.bg"
    output:
        bw1 = "Quantitation/IGV/"+ nameBuild+ ".unique.bw",
        bw2 = "Quantitation/IGV/"+ nameBuild+ ".multiple.bw"
    threads:
        2
    log:
        "Logs/"+ nameBuild+ "_BedGraphToBigWig.log"
    shell:
        "sort -k1,1 -k2,2n {input.bg1} > sorted.bg 2> {log} && "
        "bedGraphToBigWig sorted.bg  {chrom} {output.bw1} &>> {log} && "
        "sort -k1,1 -k2,2n {input.bg2} > sorted.bg 2>> {log} && "
        "bedGraphToBigWig sorted.bg {chrom} {output.bw2} &>> {log};"
        "rm -f sorted.bg "


onerror:
    shell( "rm -f STARTED COMPLETE DONE; touch FAILED")
