# Bash script to run inside the container
# 7 March 2022
# David.Nix@Hci.Utah.Edu
# Huntsman Cancer Institute

set -e
cd $jobDir
start=$(date +'%s'); rm -f FAILED COMPLETE QUEUED; touch STARTED

echo -e "\n---------- Starting -------- $((($(date +'%s') - $start)/60)) min"

# Read resources
allThreads=$(nproc)
allRam=$(expr `free -g | grep -oP '\d+' | head -n 1` - 2)
name=${PWD##*/}
vcf=$(realpath *vcf.gz)

# Print params
echo -n jobDir"     : "; echo $jobDir
echo -n name"       : "; echo $name
echo -n dataBundle" : "; echo $dataBundle
echo -n threads"    : "; echo $allThreads
echo -n ram"        : "; echo $allRam
echo -n host"       : "; echo $(hostname)
echo -n vcf"        : "; ls $vcf; echo

snakemake -p --cores $allThreads \
--stats $name"_Hg38.snakemake.stats.json" \
--snakefile *.sm \
--configfile *.yaml \
--config \
name=$name \
allThreads=$allThreads \
allRam=$allRam

# remove the input vcf and index 
rm -f $vcf $vcf.tbi

echo -e "\n---------- Complete! -------- $((($(date +'%s') - $start)/60)) min total"

## Params
# See the USeq app menus for information related to AnnotatedVcfParser and VCFCallFrequence as well as the readme for this workflow


## Svg DAG generation
# Replace the top snakemake line with 'snakemake --dag'
# Add onto the end '| dot -Tsvg > workflow.svg'
