#Define the resources from the config file

## Base name to prepend on all files
name = config["name"]

## Gzipped Fastq files
fastqReadOne = config["fR"]
fastqReadTwo = config["sR"]
fastqReadBarcode = config["bR"]

## For messaging
email = config["email"]

## Bed files
# For ReadCov calc, smallest 
readCoverageBed= config["rCB"]
# For OnTarget calc, largest 
onTargetBed= config["oTB"]
# For analysis, just right, not used with alignment and QC, just for snv/indel variant calling
analysisBed= config["aB"]

## Params
allThreads = int(config["threads"])
halfThreads = int(round(allThreads/2,0))
allMemory = config["memory"]

## Apps
useq = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/USeq/Apps"
cutadapt = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Cutadapt/1.11/cutadapt"
bwa = "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Bwa/bwa-0.7.12/bwa"
picard= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Picard/2.1.1/picard.jar"
ucsc= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/UCSC/08-Mar-2016"
samtools= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Samtools/1.3/bin/samtools"
samblaster="/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Samblaster/0.1.22/samblaster"

## Languages
java7= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Java/1.7.0-openjdk.x86_64/bin/java"
java8= "/uufs/chpc.utah.edu/common/home/u0028003/BioApps/Java/1.8.0_65/bin/java"

## References
indexFasta= "/uufs/chpc.utah.edu/common/home/u0028003/HCIAtlatl/data/Human/B37/human_g1k_v37_decoy_phiXAdaptr.fasta"

## File resources to check before launching
requiredFiles = [fastqReadOne, fastqReadTwo, fastqReadBarcode, readCoverageBed, onTargetBed, analysisBed,  useq, cutadapt, indexFasta, bwa, picard, ucsc, samtools, java7, java8]

# Include rules from common workflow
include: "bwaQCCommonRules_0.1.sm"

############# Messaging ##############
onerror:
    shell( "dir=`pwd`; mail -s \"Failed: {name} ($dir)\" {email} < {log}; sleep 4s")
onsuccess:
    shell( "dir=`pwd`; mail -s \"Complete: {name} ($dir)\" {email} < {log}; sleep 4s")

############# Rules ##############

# One rule to trigger them all
rule All:
    input:
        name+ "_uniObReadCov.bw",
        name+ "_checkGzipFiles.complete",
        name+ "_FastqCount.json.gz"
        
        
############# USeq Consensus Barcode Consolodation & Alignment ###############

# The BIG pipe for aligning three read molecular barcoded fastq files 
# The input isn't needed but triggers the resource check before the big pipe kicks off
rule AlignBarcodedFastqWithConsensus:
    input:
        name+ "_checkResources.complete",
    output:
        name+ "_MatchMates"
    log:
        name+ "_AlignBarcodedFastqWithConsensus.log"
    params: 
        rg = "\"@RG\\tID:" +name+ "\\tPL:ILLUMINA\\tLB:" +name+ "\\tSM:" +name+ "\\tCN:ARUP\\tPU:" +name+ "\""
    threads:    
        allThreads
    shell:
        # Remove prior log
        "rm -f {log} && "
        
        # Start the pipe! Append the barcode read onto the two fastq file headers
        "{java7} -jar -Xmx2G {useq}/FastqBarcodeTagger -f {fastqReadOne} -s {fastqReadTwo} "
        "-b {fastqReadBarcode} -i 2>> {log} | "

        # N adapter sequences, minimum >=3bp identity req
        "{cutadapt} --interleaved -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC "
        "-A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT --mask-adapter - 2>> {log} | "

        # Align with bwa mem
        "{bwa} mem -v 1 -t {halfThreads} -R {params.rg} -p {indexFasta} - 2>> {log} | "

        # Mark duplicates
        "{samblaster} 2>> {log} | "

        # Attach secondOfPair mates as attribute in firstOfPair sam records
        "{java7} -jar -Xmx2G {useq}/MatchMates -s {output} &>> {log} && "
        "echo [`date`] rule AlignBarcodedFastqWithConsensus: COMPLETE "
  
# Call Consensus on the barcoded bam
rule CallConsensusOnBarcodedBam:
    input:
        name+ "_MatchMates"
    output:
        name+ "_Consensus",
        name+ "_Consensus/paired_1.fastq.gz",
        name+ "_Consensus/paired_2.fastq.gz",
        name+ "_Consensus/unpaired.fastq.gz",
        name+ "_Consensus/passing.sam.gz"
    threads:
        allThreads    
    params:
        "-c 500000"
    log:
        name+ "_CallConsensusOnBarcodedBam.log"
    shell:
        "{java7} -Xmx{allMemory} -jar {useq}/Consensus {params} -t {halfThreads} -b {input}/passingMM.sorted.bam "
        "-s {output[0]} &> {log} && "
        "echo [`date`] rule CallConsensusOnBarcodedBam: COMPLETE "

# Align unpaired consensus fastq, might be no alignments
rule AlignUnpairedConsensusFastq:
    input:
        name+ "_Consensus/unpaired.fastq.gz"
    output:
        name+ "_Consensus/unpaired.sam.gz"
    params:
        rg = "\"@RG\\tID:" +name+ "\\tPL:ILLUMINA\\tLB:" +name+ "\\tSM:" +name+ "\\tCN:HCI\\tPU:" +name+ "\""
    threads:
        halfThreads
    log:
        name+ "_AlignPairedConsensusFastq.log"
    shell:
        #trapping the grep exit code with || : sometimes there are no unpaired alignments
        "{bwa} mem -v 1 -t {threads} -R {params.rg} {indexFasta} {input} 2> {log} | "
        "grep -v ^@ || : gzip > {output} && "
        "echo [`date`] rule AlignUnpairedConsensusFastq: COMPLETE "

# Align paired consensus fastq
rule AlignPairedConsensusFastq:
    input:
        name+ "_Consensus/paired_1.fastq.gz",
        name+ "_Consensus/paired_2.fastq.gz"
    output:
        name+ "_Consensus/paired.sam.gz"
    params:
        rg = "\"@RG\\tID:" +name+ "\\tPL:ILLUMINA\\tLB:" +name+ "\\tSM:" +name+ "\\tCN:ARUP\\tPU:" +name+ "\""    
    threads:
        halfThreads
    log:
        name+ "_AlignPairedConsensusFastq.log"
    shell:
        "{bwa} mem -v 1 -t {threads} -R {params.rg} {indexFasta} {input} 2> {log} | "
        "grep -v ^@ | gzip > {output} && "
        "echo [`date`] rule AlignPairedConsensusFastq: COMPLETE "

# Concatinate alignments
rule ConcatinateAlignments:
    input:
        name+ "_Consensus/passing.sam.gz",
        name+ "_Consensus/unpaired.sam.gz",
        name+ "_Consensus/paired.sam.gz"
    output:
        name+ "_Consensus/concatinated.sam.gz"
    log:
        name+ "_ConcatinateAlignments.log"
    shell:
        "cat {input} 2> {log} > {output} && "
        "echo [`date`] rule ConcatinateAlignments: COMPLETE "

# Fix mate info and sort, not always necessary but doesn't hurt
rule FixMateInformation:
    input:
        name+ "_Consensus/concatinated.sam.gz"
    output:
        name+ "_unfiltered.bam"
    log:
        name+ "_fixMateInformation.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {picard} FixMateInformation CREATE_INDEX=true SO=coordinate "
        "MAX_RECORDS_IN_RAM=5000000 TMP_DIR=. VALIDATION_STRINGENCY=SILENT INPUT={input} "
        "OUTPUT={output} &> {log} && "
        "echo [`date`] rule fixMateInformation: COMPLETE "








