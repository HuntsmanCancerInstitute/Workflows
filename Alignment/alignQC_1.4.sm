# This SnakeMake file contains paths for the HCI redwood cluster

#Define the resources from the config file

## Base name to prepend on all files
name = str(config["name"])
coreid = str(config["id"])

## Gzipped Fastq files
fastqReadOne = str(config["fR"])
fastqReadTwo = str(config["sR"])

# For ReadCov calc, smallest, for calc fraction with X coverage
regionsForRC = str(config["rcBed"])

# For OnTarget calc, largest
regionsForOnTarget = str(config["otBed"])

## Params
allThreads = int(config["threads"])
halfThreads = int(round(allThreads/2,0))
allMemory = str(config["memory"])

## Apps
useq = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/useq/9.1.3/Apps"
cutadapt="/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/modulesoftware/cutadapt"
bwa = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/bwa/0.7.15/bwa"
picard= "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/picard/2.9.0/picard.jar"
ucsc= "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/UCSC"
samtools= "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/samtools/1.10/samtools"
gatk = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/app/gatk/3.8/GenomeAnalysisTK.jar"

## Resources
goldIndels = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/data/Human/B37/2.8/Mills_and_1000G_gold_standard.indels.b37.vcf"
oneKIndels = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/data/Human/B37/2.8/1000G_phase1.indels.b37.vcf"
dbsnp = "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/data/Human/B37/2.8/dbsnp_138.b37.vcf"
indexFasta= "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/data/Human/B37/human_g1k_v37_decoy_phiXAdaptr.fasta"
indexDict= "/uufs/chpc.utah.edu/common/HIPAA/hci-bioinformatics1/atlatl/data/Human/B37/human_g1k_v37_decoy_phiXAdaptr.dict"

## Languages
# we are relying on the system java being java version 1.8, slightly dangerous
# gatk doesn't play nice with this version, must use jdk inflaters and not C extensions 
# do not put java options in here, doesn't play nice with CheckResources ls command
java8= "/usr/bin/java"

requiredFiles = [fastqReadOne, fastqReadTwo, regionsForRC, regionsForOnTarget, useq, cutadapt, bwa, picard, ucsc, samtools, gatk, goldIndels, oneKIndels, dbsnp, indexFasta, java8]


############# Messaging ##############
onerror:
    shell( "echo \"There were errors! see logs\"")
onsuccess:
    shell( "echo \"Mission complete!\"")

############# Rules ##############

# One rule to rule them all
rule Cleanup:
    input:
        name+ "_uniObReadCov.bw",
        name+ "_checkGzipFiles.complete",
        name+ "_FastqCount.json.gz",
        name+ ".alignmentSummaryMetrics.txt",
        name+ ".insertSizeMetrics.txt",
        name+ ".insertSizeMetrics.pdf",
        name+ ".hsMetrics.txt",
        name+ ".final.bam",
        name+ ".final.bai"
    shell:
        "mkdir Log Json ReadCov Metrics && "
        "gzip *.log && "
        "mv *.log.gz Log/ && "
        "mv *.json.gz Json/ && "
        "mv *.bed.gz *.bw ReadCov/ && "
        "mv *Metrics.txt *Metrics.pdf Metrics/ && "
        "mv *perRegionCoverageStats.txt.gz ReadCov/ && "
        "rm -rf *_MPA *_SAE snappy* && "
        "echo [`date`] rule Cleanup: COMPLETE; echo" 

############# Fastq and resources check ##############

# Uses ls to check if all the required resources are present 
rule CheckResources:
    output:
        temp(name+ "_CheckResources.complete")
    log:
        name+ "_CheckResources.log"
    shell:
        "ls {requiredFiles} &> {log} && touch {output} && "
        "echo [`date`] rule CheckResources: COMPLETE ; echo"

# Uses gunzip -t to check the integrity of the xxx.gz files in the working directory
rule CheckGzipFiles:
    input:
        name+ "_CheckResources.complete"
    output:
        temp(name+ "_checkGzipFiles.complete")
    log:
        name+ "_CheckGzipFiles.log"
    shell:
        "gunzip -tv *.gz &> {log} && touch {output} && "
        "echo [`date`] rule CheckGzipFiles: COMPLETE; echo" 
        
# Count the number of fastq records, used in QC
rule FastqCount:
    input:
        name+ "_checkGzipFiles.complete"
    output:
        name+ "_FastqCount.json.gz"
    shell:
        "x=$(gunzip -c {fastqReadOne} | wc -l | tr -d \" \") && "
        "y=$(($x/2)) && "
        "echo \{{ > {name}_FastqCount.json && "
        "echo \\\"numberFastqReads\\\": $y >> {name}_FastqCount.json && "
        "echo \}} >> {name}_FastqCount.json && "
        "gzip {name}_FastqCount.json && "
        "echo [`date`] rule FastqCount: COMPLETE; echo "

# prepare interval lists, because Picard is annoying and doesn't work with bed files
rule PicardIntervalForRC:
    input:
        name+ "_CheckResources.complete"
    output:
        temp(regionsForRC + ".intervalList")
    log:
        name+ "_PicardIntervalForRC.log"
    shell:
        "{java8} -Xmx4G -jar {picard} BedToIntervalList I={regionsForRC} "
        "O={output} SD={indexDict} &> {log} && "
        "echo [`date`] rule PicardIntervalForRC: COMPLETE; echo" 

# prepare interval lists, because Picard is annoying and doesn't work with bed files
rule PicardIntervalForOnTarget:
    input:
        name+ "_CheckResources.complete"
    output:
        temp(regionsForOnTarget + ".intervalList")
    log:
        name+ "_PicardIntervalForOnTarget.log"
    shell:
        "{java8} -Xmx4G -jar {picard} BedToIntervalList I={regionsForOnTarget} "
        "O={output} SD={indexDict} &> {log} && "
        "echo [`date`] rule PicardIntervalForOnTarget: COMPLETE; echo" 


############# Alignment ###############

# The input isn't needed but triggers the resource check before the big pipe kicks off
rule TrimAdapters:
    input:
        name+ "_checkGzipFiles.complete"
    output:
        tfq1 = temp(name+ "_trimmed1.fastq.gz"),
        tfq2 = temp(name+ "_trimmed2.fastq.gz")
    log:
        name+ "_cutadaptMetrics.txt"
    threads:
        allThreads
    shell:
        "{cutadapt} -j {threads} -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA "
        "-A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -o {output.tfq1} -p {output.tfq2} "
        " {fastqReadOne} {fastqReadTwo} &> {log} && "
        "echo [`date`] rule TrimAdapters: COMPLETE; echo" 

# align with BWA with all threads
rule BwaAlign:
    input:
        tfq1 = name+ "_trimmed1.fastq.gz",
        tfq2 = name+ "_trimmed2.fastq.gz"
    output:
        temp(name+ "_raw.bam")
    log:
        name+ "_BwaAlign.log"
    params: 
        "\"@RG\\tID:" +coreid+ "\\tPL:ILLUMINA\\tLB:" +coreid+ "\\tSM:" +name+ "\\tCN:HCI\\tPU:" +coreid+ "\""
    threads:    
        allThreads
    shell:
        # Remove prior log
        "rm -f {log} && "

        # Align with bwa mem
        "{bwa} mem -v 1 -t {threads} -R {params} {indexFasta} "
        "{input.tfq1} {input.tfq2} "
        " 2>> {log} | "

        # Write as bam
        "{samtools} view -b - 2>> {log} > {output} && "
        
        # clean up
        "echo [`date`] rule BwaAlign: COMPLETE; echo" 

# Fix mate info and sort, not always necessary but doesn't hurt
rule FixMateInformation:
    input:
        name+ "_raw.bam"
    output:
        bam = temp(name+ ".bam"),
        bai = temp(name+ ".bai")
    threads:
        allThreads
    log:
        name+ "_FixMateInformation.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {picard} FixMateInformation "
        "CREATE_INDEX=true SO=coordinate MAX_RECORDS_IN_RAM=5000000 TMP_DIR=. "
        "VALIDATION_STRINGENCY=SILENT INPUT={input} OUTPUT={output.bam} &> {log} && "
        "echo [`date`] rule FixMateInformation: COMPLETE; echo" 


############# Bam Filtering ##############

# Use the SamAlignmentExtractor to remove poor quality alignments but keep off target in pass output for SV calling
rule SamAlignmentExtractor:
    input:
        bam = name+ ".bam",
        bai = name+ ".bai"
    output:
        dir = temp(name+ "_SAE"),
        bam = temp(name+ ".sae.bam"),
        bai = temp(name+ ".sae.bai"),
        json = name+ "_samAlignmentExtractor.json.gz"
    params:
       "-q 13 -d -f -x",
    threads:
        allThreads
    log:
        name+ "_SamAlignmentExtractor.log",
    shell:
        "{java8} -Xmx{allMemory} -jar {useq}/SamAlignmentExtractor {params} -s {output.dir} -b {input.bam} "
        "-r {regionsForOnTarget} -j {output.json} &> {log} && "
        "mv {output.dir}/*_passSAE.bam {output.bam} &>> {log} && "
        "mv {output.dir}/*_passSAE.bai {output.bai} &>> {log} && "
        "echo [`date`] rule SamAlignmentExtractor: COMPLETE; echo" 

# Remove duplicates
rule RemoveDuplicates:
    input:
        bam = name+ ".sae.bam",
        bai = name+ ".sae.bai"
    output:
        bam = temp(name+ ".filtered.bam"),
        bai = temp(name+ ".filtered.bai"),
        metrics = name+ "_RemoveDuplicatesMetrics.txt"
    threads:
        allThreads
    log:
        name+ "_RemoveDuplicates.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {picard} MarkDuplicates "
        "REMOVE_DUPLICATES=true TMP_DIR=. VERBOSITY=ERROR "
        "VALIDATION_STRINGENCY=SILENT MAX_RECORDS_IN_RAM=5000000 CREATE_INDEX=true "
        "OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 "
        "METRICS_FILE={output.metrics} INPUT={input.bam} OUTPUT={output.bam} &> {log} && "
        "echo [`date`] rule RemoveDuplicates: COMPLETE; echo" 
        
############# Indel Realignment and Recalibration ##############

# Realign Indels with GATK, target creator
# this is no longer recommended by GATK Best practices and in fact removed from latest
# GATK, but we still do it here for benefit of other callers and visualization
rule CreateTargetsForIndelRealignment:
    input:
        bam = name+ ".filtered.bam",
        bai = name+ ".filtered.bai"
    output:
        temp( name+ "_indelRealign.intervals")
    threads:
        allThreads
    log:
        name+ "_CreateTargetsForIndelRealignment.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {gatk} -T RealignerTargetCreator "
        "-jdk_deflater -jdk_inflater "
        "-R {indexFasta} -I {input.bam} -o {output} --known {goldIndels} "
        "--known {oneKIndels} &> {log} && "
        "echo [`date`] rule CreateTargetsForIndelRealignment: COMPLETE; echo" 

# Realign Indels with GATK, perform realignments
rule RealignIndels:
    input:
        bam = name+ ".filtered.bam",
        bai = name+ ".filtered.bai",
        targets = name+ "_indelRealign.intervals"
    output:
        bam = temp(name+ ".realign.bam"),
        bai = temp(name+ ".realign.bai")
    threads:
        allThreads
    log:
        name+ "_IndelRealign.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {gatk} -T IndelRealigner "
        "-jdk_deflater -jdk_inflater -R {indexFasta} "
        "-targetIntervals {input.targets} -I {input.bam} -o {output.bam} "
        "-known {goldIndels} --maxReadsForRealignment 100000 --maxReadsForConsensuses 500 "
        "-known {oneKIndels} --filter_bases_not_stored &> {log} && "
        "echo [`date`] rule RealignIndels: COMPLETE; echo" 
        
# Base recalibration with GATK, target creator
rule RecalibrateBases:
    input:
        bam = name+ ".realign.bam",
        bai = name+ ".realign.bai"
    output:
        temp( name+ "_recalibration.grp")
    threads:
        allThreads    
    log:
        name+ "_RecalibrateBases.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {gatk} -nct {threads} -T BaseRecalibrator "
        "-jdk_deflater -jdk_inflater -R {indexFasta} "
        "-knownSites {dbsnp} -I {input.bam} -o {output} &> {log} && "
        "echo [`date`] rule RecalibrateBases: COMPLETE; echo" 

# Write out recalibrated bam with GATK
rule PrintRecalibratedBam:
    input:
        grp = name+ "_recalibration.grp",
        bam = name+ ".realign.bam",
        bai = name+ ".realign.bai"
    output:
        bam = name+ ".final.bam",
        bai = name+ ".final.bai"
    threads:
        allThreads
    log:
        name+ "_PrintRecalibratedBam.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {gatk} -nct {threads} -T PrintReads "
        "-jdk_deflater -jdk_inflater -R {indexFasta} -I {input.bam} "
        "-BQSR {input.grp} -o {output.bam} --filter_bases_not_stored &> {log} && "
        "echo [`date`] rule PrintRecalibratedBam: COMPLETE; echo" 
        
        
############# Alignment QC ##############

# collect raw alignment metrics from the raw bam file before filtering
rule PicardCollectAlignmentSummaryMetrics:
    input:
        bam = name+ ".bam",
        bai = name+ ".bai"
    output:
        name+ ".alignmentSummaryMetrics.txt"
    log:
        name+ "_PicardCollectAlignmentSummaryMetrics.log"
    shell:
        "{java8} -Xmx8G -jar {picard} CollectAlignmentSummaryMetrics "
        "I={input.bam} R={indexFasta} O={output} "
        "VALIDATION_STRINGENCY=SILENT VERBOSITY=WARNING &> {log} && "
        "echo [`date`] rule PicardCollectAlignmentSummaryMetrics: COMPLETE; echo" 

# collect insertion size metrics from final bam file
rule PicardCollectInsertSizeMetrics:
    input:
        bam = name+ ".final.bam",
        bai = name+ ".final.bai"
    output:
        text = name+ ".insertSizeMetrics.txt",
        hist = name+ ".insertSizeMetrics.pdf"
    log:
        name+ "_PicardCollectInsertSizeMetrics.log"
    shell:
        "{java8} -Xmx8G -jar {picard} CollectInsertSizeMetrics "
        "I={input.bam} O={output.text} H={output.hist} M=0.5 "
        "VALIDATION_STRINGENCY=SILENT VERBOSITY=WARNING &> {log} && "
        "echo [`date`] rule PicardCollectInsertSizeMetrics: COMPLETE; echo" 

# collect hybrid selection metrics from final bam file
# set quality same as filtering in SamAlignmentExtractor
# also clip overlapping reads
rule PicardCollectHsMetrics:
    input:
        bam = name+ ".final.bam",
        bai = name+ ".final.bai",
        rc = regionsForRC + ".intervalList",
        ot = regionsForOnTarget + ".intervalList"
    output:
        name+ ".hsMetrics.txt"
    log:
        name+ "_PicardCollectHsMetrics.log"
    shell:
        "{java8} -Xmx16G -jar {picard} CollectHsMetrics "
        "I={input.bam} O={output} R={indexFasta} "
        "BAIT_INTERVALS={input.rc} TARGET_INTERVALS={input.ot} "
        "CLIP_OVERLAPPING_READS=TRUE MINIMUM_MAPPING_QUALITY=13 "
        "MINIMUM_BASE_QUALITY=20 VALIDATION_STRINGENCY=SILENT "
        "VERBOSITY=WARNING &> {log} && "
        "echo [`date`] rule PicardCollectHsMetrics: COMPLETE; echo" 


# QC, Merge paired alignments for unique observation QC
rule MergePairedAlignments:
    input:
        bam = name+ ".final.bam",
        bai = name+ ".final.bai"
    output:
        dir = temp(name+ "_MPA"),
        json = name+ "_mergePairedAlignments.json.gz"   
    threads:
        allThreads
    log:
        name+ "_MergePairedAlignments.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {useq}/MergePairedAlignments -b {input.bam} -d {output.dir} "
        "-j {output.json} -t {threads} &> {log} && "
        "echo [`date`] rule MergePairedAlignments: COMPLETE; echo" 

# QC, Generate read coverage QC metrics and bed pass fail files with Sam2USeq
rule Sam2USeq:
    input:
        name+ "_MPA"
    output:
        useq = temp(name+ "_uniObReadCov.useq"),
        cs = name+ "_perRegionCoverageStats.txt.gz",
        json = name+ "_sam2USeq.json.gz"
    params:
        "-v H_sapiens_Feb_2009 -x 1500 -r -c 13"    
    threads:
        allThreads    
    log:
        name+ "_Sam2USeq.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {useq}/Sam2USeq {params} -f {input} "
        "-b {regionsForRC} -p {output.cs} -j {output.json} -n {name} &> {log} && "
        "cp {input}/*useq {output.useq} &>> {log} && "
        "echo [`date`] rule Sam2USeq: COMPLETE; echo" 
        
# QC, Convert the uniOb read coverage track to something that will play nicely with IGV and the UCSC genome browsers
rule USeq2UCSCBig:
    input:
        name+ "_uniObReadCov.useq"
    output:
        name+ "_uniObReadCov.bw"
    threads:
        allThreads    
    log:
        name+ "_USeq2UCSCBig.log"
    shell:
        "{java8} -Xmx{allMemory} -jar {useq}/USeq2UCSCBig -u {input} -f -d {ucsc} &> {log} && "
        "echo [`date`] rule Useq2UCSCBig: COMPLETE; echo" 
